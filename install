#!/bin/bash

# Arch Linux Install Script 
# -------------------------
# author    : prstephens
#             https://github.com/prstephens           
# project   : https://github.com/prstephens/archinstallscript
# license   : LGPL-3.0 (http://opensource.org/licenses/lgpl-3.0.html)
# reference : https://wiki.archlinux.org/index.php/Installation_guide

set -e
set -o pipefail
#set -x #toggle for debug. Will print all commands.

# Globals
VERSION="2"
BACKTITLE="Arch Installer v"$VERSION
BASE_URL="https://raw.githubusercontent.com/prstephens/archinstallscript/master/"
USE_CRYPT=0
USE_RAID=0
TLP=0
USE_GRUB=0
MIRROR_COUNTRY=GB

# --------------------------------------------------------

mainmenu(){
        if [ "${1}" = "" ]; then
                nextitem="."
        else
                nextitem=${1}
        fi
        options=()
        options+=("WIPE DEVICE" "(Optional) Securely wipe disk or partition before installation")
        options+=("PARTITION DISK" "Partition disk using cfdisk to create EFI, swap and root partitions")
        options+=("ENCRYPTION" "(Optional) Use full disk enryption with detached LUKS header")
        options+=("MOUNT" "Select the partitions to mount")
        options+=("SETUP USER" "Setup a user and root password")
        options+=("INSTALL" "Perform Arch Linux base Installation")
        options+=("" "")
        options+=("FINISH" "Finish and reboot")

        sel=$(whiptail --backtitle "${BACKTITLE}" --title "Main Menu" --menu "" --fb --cancel-button "Exit" --default-item "${nextitem}" 0 78 0\
                "${options[@]}" \
                3>&1 1>&2 2>&3)
        if [ "$?" = "0" ]; then
                case ${sel} in
                        "WIPE DEVICE")
                                preparedisk
                                nextitem="PARTITION DISK"
                        ;;
                        "PARTITION DISK")
                                diskpartcfdisk
                                nextitem="ENCRYPTION"
                        ;;
                        "ENCRYPTION")
                                enablelvm
                                nextitem="MOUNT"
                        ;;
                        "MOUNT")
                                choosepartitions
                                nextitem="SETUP USER"
                        ;;
                        "SETUP USER")
                                getuserinfo
                                nextitem="INSTALL"
                        ;;
                        "INSTALL")
                                performinstall
                                configuration
                                installbootloader
                                setupuser
                                finish
                                nextitem="FINISH"
                        ;;
                        "FINISH")
                                rebootpc
                                nextitem="FINISH"
                        ;;
                esac
                mainmenu "${nextitem}"
        else
                clear
        fi
}

preparedisk(){
        wipedevice=$( selectdisk "Choose device to be wiped" )

        if (whiptail --backtitle "${BACKTITLE}" --title "### WARNING ###" --yesno "Are you sure you want to secure wipe ${wipedevice}? \n\nTHIS CANNOT BE UNDONE. ALL DATA WILL BE PERMANENTLY LOST!" --defaultno --fb 0 78) then
		cryptsetup open --type plain -d /dev/urandom ${wipedevice} to_be_wiped
                dd if=/dev/zero of=/dev/mapper/to_be_wiped status=progress || :
                cryptsetup close to_be_wiped
	fi 
}

diskpartcfdisk(){
	device=$( selectdisk "Edit Partitions (cfdisk)" )
        if [ "$?" = "0" ]; then
            clear
            cfdisk ${device}
        fi
}

selectdisk(){
        items=$(lsblk -d -p -n -l -o NAME,SIZE -e 7,11)
        options=()
        IFS_ORIG=$IFS
        IFS=$'\n'
        for item in ${items}
        do  
                options+=("${item}" "")
        done
        IFS=$IFS_ORIG
        result=$(whiptail --backtitle "${BACKTITLE}" --title "${1}" --menu "" --fb 0 78 0 "${options[@]}" 3>&1 1>&2 2>&3)
        if [ "$?" != "0" ]
        then
                return 1
        fi
        echo ${result%%\ *}
        return 0    
}

enablelvm(){
        USE_CRYPT=1
        chooseencryptpartition
        clear
        echo "### CREATING LUKS PARTITION ON ${realrootdev} ____________________"

        dd if=/dev/zero of=header.img bs=16M count=1
        chmod 600 header.img
        cryptsetup luksFormat $realrootdev --offset 32768 --header header.img
        cryptsetup open --header header.img $realrootdev cryptlvm

        CRYPTHEADERUUID=$(blkid -s UUID -o value header.img)
        CRYPTROOTUUID=$(blkid -s UUID -o value $realrootdev)

        # create the LVM partitons
        pvcreate /dev/mapper/cryptlvm
        vgcreate vg1 /dev/mapper/cryptlvm

        swapspace=$(whiptail --backtitle "$BACKTITLE" --inputbox "Enter SWAP size:" --fb 0 20 3>&1 1>&2 2>&3)

        lvcreate -L ${swapspace}G vg1 -n swap
        lvcreate -l 100%FREE vg1 -n root
}

chooseencryptpartition(){
	itemsinfo=$(lsblk -o NAME,SIZE,FSTYPE)
        items=$(lsblk -p -n -l -o NAME -e 7,11)
        deviceitems=$(lsblk -d -n -l -o NAME -e 7,11)
        options=()
        optionstoremove=()
        IFS_ORIG=$IFS
        IFS=$'\n'
        for item in ${deviceitems}
        do  
                optionstoremove+=("/dev/${item}")
        done
        for item in ${items}
        do  
                if [[ ! " ${optionstoremove[@]} " =~ " ${item} " ]]; then
                        options+=("${item}" "")
                fi
        done

	realrootdev=$(whiptail --backtitle "${BACKTITLE}" --title "Select Root partition to encrypt" --menu "${itemsinfo}" --fb --default-item "${rootdev}" 0 78 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	fi
	
}

choosepartitions(){
        itemsinfo=$(lsblk -o NAME,SIZE,FSTYPE)
        items=$(lsblk -p -n -l -o NAME -e 7,11)
        deviceitems=$(lsblk -d -n -l -o NAME -e 7,11)
        options=()
        optionstoremove=()
        IFS_ORIG=$IFS
        IFS=$'\n'
        for item in ${deviceitems}
        do  
                optionstoremove+=("/dev/${item}")
        done
        for item in ${items}
        do  
                if [[ ! " ${optionstoremove[@]} " =~ " ${item} " ]]; then
                        options+=("${item}" "")
                fi
        done
      
	bootdev=$(whiptail --backtitle "${BACKTITLE}" --title "Select Boot partition" --menu "${itemsinfo}" --fb --default-item "${bootdev}" 0 78 0 \
		"none" "-" \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	else
		if [ "${bootdev}" = "none" ]; then
			bootdev=
		fi
	fi

	swapdev=$(whiptail --backtitle "${BACKTITLE}" --title "Select Swap partition" --menu "${itemsinfo}" --fb --default-item "${swapdev}" 0 78 0 \
		"none" "-" \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	else
		if [ "${swapdev}" = "none" ]; then
			swapdev=
		fi
	fi

        rootdev=$(whiptail --backtitle "${BACKTITLE}" --title "Select Root partition" --menu "${itemsinfo}" --fb --default-item "${rootdev}" 0 78 0 \
                "${options[@]}" \
                3>&1 1>&2 2>&3)
        if [ ! "$?" = "0" ]; then
                return 1
        fi
        
        msg=""
        msg=${msg}"Boot          : "${bootdev}"\n"
        msg=${msg}"Swap          : "${swapdev}"\n"
        msg=${msg}"Root          : "${rootdev}"\n"

        if !(whiptail --backtitle "${BACKTITLE}" --title "Are these values correct?" --fb --yesno "${msg}" 0 78) then
                choosepartitions
        fi      
}

getuserinfo(){
        hostname=$(whiptail --backtitle "$BACKTITLE" --inputbox "Enter hostname:" --fb 0 50 3>&1 1>&2 2>&3)
        user=$(whiptail --backtitle "$BACKTITLE" --inputbox "Enter admin username:" --fb 0 50 3>&1 1>&2 2>&3)

        password="x"
        password2="xx"
        passphrase_invalid_message=""

        while [[ "$password" != "$password2" ]]; do

            password=$(whiptail --backtitle "$BACKTITLE" --passwordbox "${passphrase_invalid_message}Please enter the admin password:" --fb 10 50 3>&1 1>&2 2>&3)
            password2=$(whiptail --backtitle "$BACKTITLE" --passwordbox "Please repeat the admin password:" --fb 10 50 3>&1 1>&2 2>&3)
            passphrase_invalid_message="Passwords do not match! "

        done
        
        msg=${msg}"Hostname      : "${hostname}"\n"
        msg=${msg}"User          : "${user}"\n\n"
}

performinstall(){
        if (whiptail --backtitle "${BACKTITLE}" --title "RAID" --yesno "Is a RAID Array being used?" --defaultno --fb 0 78) then
                USE_RAID=1
                msg=${msg}"Use RAID?     : "${USE_RAID}"\n\n"
	fi

        whiptail --backtitle "${BACKTITLE}" --title "Are these values correct?" --yesno "${msg}" --fb 0 78 3>&1 1>&2 2>&3
        if ([ ! "$?" = "0" ];) then
		mainmenu "1)"
	fi

        if (whiptail --backtitle "${BACKTITLE}" --title "### WARNING ###" --yesno "Do you want to format ${bootdev}? \n\nTHIS COULD ERASE EXISITING OPERATING SYSTEM BOOTLOADERS" --defaultno --fb 0 78) then
		mkfs.fat -F 32 ${bootdev}
	fi
        
        clear

        timedatectl set-ntp true

        # Setup the partitions
        echo "____________________ ### STARTING INSTALL ### ____________________"
        read -p "You are about to wipe ${rootdev}? [y/N]: " wipe
        if [ $wipe = 'y' ]
        then
                wipefs -a $rootdev
                mkfs.btrfs $rootdev
        else
                echo "Install stopped"
                exit
        fi

        if [ ! "${swapdev}" = "" ]
        then
                mkswap $swapdev
                swapon $swapdev
        fi

        #root
        mount $rootdev /mnt

        echo "### Creating BTRFS subvolumes... ____________________"
        btrfs su cr /mnt/@
        btrfs su cr /mnt/@home
        btrfs su cr /mnt/@var_log
        btrfs su cr /mnt/@snapshots
        umount /mnt

        mount -o noatime,commit=120,compress=zstd,space_cache=v2,subvol=@ $rootdev /mnt
        
        # You need to manually create folders to mount the other subvolumes at
        mkdir -p /mnt/{boot/efi,home,var/log,.snapshots}

        mount -o noatime,commit=120,compress=zstd,space_cache=v2,discard=async,subvol=@home $rootdev /mnt/home

        mount -o noatime,commit=120,compress=zstd,space_cache=v2,discard=async,subvol=@var_log $rootdev /mnt/var/log

        mount -o noatime,commit=120,compress=zstd,space_cache=v2,discard=async,subvol=@snapshots $rootdev /mnt/.snapshots

        mount $bootdev /mnt/boot

        ROOTUUID=$(blkid -s UUID -o value $rootdev)

        # determine if we are installing on a laptop or desktop
        # if laptop, install tlp for better power management
        # see here: https://www.dmtf.org/sites/default/files/standards/documents/DSP0134_3.6.0.pdf
        chassis=$(cat /sys/class/dmi/id/chassis_type)
        if exists_in_list "8,9,10" "," ${chassis}
        then
                TLP=1
                echo $'\ntlp' >> /tmp/packages 
        fi

        bootloader="Systemd"
        bootloader=$(whiptail --backtitle "$BACKTITLE" --title "Select a bootloader to install" --radiolist "Choose" 20 30 5 \
        "Systemd" "" Systemd \
        "GRUB" "" GRUB \
        3>&1 1>&2 2>&3)

        if [[ "$bootloader" == "GRUB" ]]
        then
                USE_GRUB=1
                echo $'\ngrub\nos-prober\ngrub-btrfs' >> /tmp/packages
        else
                USE_GRUB=0
        fi

        if [[ "$USE_RAID" -eq 1 ]]
        then
                echo $'\nmdadm' >> /tmp/packages
        fi

        if [[ "$USE_CRYPT" -eq 1 ]]
        then
                echo $'\nlvm2' >> /tmp/packages
        fi

        echo "### Installing packages... ____________________"

        pacstrap /mnt $(< /tmp/packages)
        
        genfstab -U /mnt >> /mnt/etc/fstab
}

exists_in_list() {
    LIST=$1
    DELIMITER=$2
    VALUE=$3
    [[ "$LIST" =~ ($DELIMITER|^)$VALUE($DELIMITER|$) ]]
}


configuration(){
        clear
        echo "### Configuring system... ____________________"

        # Set Cloudfare as our DNS
        cat <<EOT > /mnt/etc/resolv.conf
options timeout:1
options single-request

nameserver 1.1.1.1
nameserver 1.0.0.1
nameserver 8.8.8.8
EOT

        chattr +i /mnt/etc/resolv.conf

        cat <<EOT >> /mnt/etc/NetworkManager/NetworkManager.conf
[main]
dns=none
systemd-resolved=false
EOT

        cat <<EOT >> /mnt/etc/hosts
127.0.0.1	localhost
::1		localhost
192.168.1.192   rainbowdash.localdomain rainbowdash
192.168.1.66    libreelec.localdomain libreelec
EOT

        echo "Updating pacman mirrors to awesomeness..."
        # Update pacman mirror list
        arch-chroot /mnt reflector --verbose -c $MIRROR_COUNTRY -l 25 --age 12 -p https --sort rate --save /etc/pacman.d/mirrorlist

        echo "Setting up spacetime continuum..."
        # Set date time
        arch-chroot /mnt ln -sf /usr/share/zoneinfo/Europe/London /etc/localtime
        arch-chroot /mnt hwclock --systohc

        # Set locale to en_US.UTF-8 UTF-8
        arch-chroot /mnt sed -i '/en_GB.UTF-8 UTF-8/s/^#//g' /etc/locale.gen
        arch-chroot /mnt locale-gen
        echo "LANG=en_GB.UTF-8" >> /mnt/etc/locale.conf

        # Set the console keymap
        echo "KEYMAP=uk" >> /mnt/etc/vconsole.conf

        # Set hostname
        echo "${hostname}" > /mnt/etc/hostname
        echo "127.0.1.1 ${hostname}.localdomain  ${hostname}" >> /mnt/etc/hosts

        # Set keyboard FN keys to act normal!
        echo "options hid_apple fnmode=2" > /mnt/etc/modprobe.d/hid_apple.conf
        
        # nano syntax highlighting
        echo "include /usr/share/nano/*.nanorc" >> /mnt/etc/nanorc

        cat <<EOT > /etc/profile.d/shell-timeout.sh
TMOUT="\$(( 60*30 ))";
[ -z "\$DISPLAY" ] && export TMOUT;
case \$( /usr/bin/tty ) in
	/dev/tty[0-9]*) export TMOUT;;
esac
EOT
        # performance and secuirty tweaks
        arch-chroot /mnt curl -sL $BASE_URL/configs/system/99-performance.conf -o /etc/sysctl.d/99-performance.conf

        echo "tcp_bbr" > /mnt/etc/modules-load.d/bbr.conf

        # Create the pacman mirrorlist updater service
        cat <<EOT > /mnt/etc/systemd/system/reflector.service
[Unit]
Description=Pacman mirrorlist update
Wants=network-online.target
After=network-online.target nss-lookup.target
[Service]
Type=oneshot
ExecStart=/usr/bin/reflector -c GB -l 25 --age 12 -p https --sort rate --save /etc/pacman.d/mirrorlist
[Install]
WantedBy=multi-user.target
EOT

        cat <<EOT > /mnt/etc/modprobe.d/blacklist.conf
blacklist iTCO_wdt
blacklist pcspkr
blacklist joydev
blacklist mousedev
blacklist mac_hid
blacklist uvcvideo
blacklist xpad
blacklist nvidiafb
blacklist nouveau
EOT
        # for 11th cpu or lower
        cat <<EOT > /mnt/etc/modprobe.d/i915.conf
options i915 enable_guc=2
EOT

        cat << EOT > /mnt/etc/udev/rules.d/60-ioschedulers.rules
# set scheduler for NVMe
ACTION=="add|change", KERNEL=="nvme[0-9]*", ATTR{queue/scheduler}="none"
# set scheduler for SSD and eMMC
ACTION=="add|change", KERNEL=="sd[a-z]|mmcblk[0-9]*", ATTR{queue/rotational}=="0", ATTR{queue/scheduler}="mq-deadline"
# set scheduler for rotating disks
ACTION=="add|change", KERNEL=="sd[a-z]", ATTR{queue/rotational}=="1", ATTR{queue/scheduler}="bfq"
EOT

        # PulseAudio
        arch-chroot /mnt sed -i '/load-module module-suspend-on-idle/ s/^#*/#/' /etc/pulse/default.pa

        # speed up boot time with lz4
        sed -i 's/^MODULES=.*$/MODULES=(i915 btrfs lz4 lz4_compress vfat)/' /mnt/etc/mkinitcpio.conf
        sed -i 's/^#COMPRESSION="lz4".*$/COMPRESSION="lz4"/' /mnt/etc/mkinitcpio.conf
        sed -i 's/^#COMPRESSION_OPTIONS=.*$/COMPRESSION_OPTIONS="-9"/' /mnt/etc/mkinitcpio.conf
        sed -i 's/^#MODULES_DECOMPRESS=.*$/MODULES_DECOMPRESS="yes"/' /mnt/etc/mkinitcpio.conf

        if [[ "$USE_RAID" -eq 1 ]]
        then
                mdadm --detail --scan >> /mnt/etc/mdadm.conf
                sed -i 's/^BINARIES=.*$/BINARIES=(mdmon)/' /mnt/etc/mkinitcpio.conf
                sed -i 's/^HOOKS=.*$/HOOKS=(systemd autodetect keyboard sd-vconsole modconf kms block mdadm_udev filesystems)/' /mnt/etc/mkinitcpio.conf

                if [[ "$USE_CRYPT" -eq 1 ]]
                then
                        sed -i 's/^HOOKS=.*$/HOOKS=(systemd autodetect keyboard sd-vconsole modconf kms block mdadm_udev sd-encrypt lvm2 filesystems)/' /mnt/etc/mkinitcpio.conf
                fi
        else
                if [[ "$USE_CRYPT" -eq 1 ]]
                then
                        sed -i 's/^HOOKS=.*$/HOOKS=(systemd autodetect keyboard sd-vconsole modconf kms block sd-encrypt lvm2 filesystems)/' /mnt/etc/mkinitcpio.conf
                else
                        sed -i 's/^HOOKS=.*$/HOOKS=(systemd autodetect keyboard sd-vconsole modconf kms block filesystems)/' /mnt/etc/mkinitcpio.conf
                fi
        fi

        # Bluetooth config
        arch-chroot /mnt sed -i 's/^#DiscoverableTimeout = 0/DiscoverableTimeout = 0/' /etc/bluetooth/main.conf
        arch-chroot /mnt sed -i 's/^#AutoEnable=true/AutoEnable=true/' /etc/bluetooth/main.conf
        arch-chroot /mnt sed -i 's/^#FastConnectable=.*$/FastConnectable=true/' /etc/bluetooth/main.conf
        arch-chroot /mnt sed -i 's/^#ReconnectIntervals=.*$/ReconnectIntervals=5/' /etc/bluetooth/main.conf

        # BBC Micro console font :)
        arch-chroot /mnt curl -sL $BASE_URL/fonts/acorn/console/bedstead-10.psf.gz -o /usr/share/kbd/consolefonts/bedstead-10.psf.gz
        arch-chroot /mnt curl -sL $BASE_URL/fonts/acorn/console/bedstead-20.psf.gz -o /usr/share/kbd/consolefonts/bedstead-20.psf.gz
        arch-chroot /mnt curl -sL $BASE_URL/fonts/acorn/console/acorn.psf.gz -o /usr/share/kbd/consolefonts/acorn.psf.gz
        echo "FONT=bedstead-20" >> /mnt/etc/vconsole.conf

        # Enable services
        echo "Enabling services..."
        arch-chroot /mnt systemctl enable NetworkManager.service
        arch-chroot /mnt systemctl enable bluetooth.service
        arch-chroot /mnt systemctl enable cups.service
        arch-chroot /mnt systemctl enable reflector.timer
        arch-chroot /mnt systemctl enable fstrim.timer
        arch-chroot /mnt systemctl enable sshd

        if [[ "$TLP" -eq 1 ]]
        then
                arch-chroot /mnt systemctl enable tlp
        fi

        if [[ "$USE_CRYPT" -eq 1 ]]
        then
                arch-chroot /mnt systemctl enable lvm2-monitor
        else
                arch-chroot /mnt systemctl mask lvm2-monitor
        fi

        arch-chroot /mnt systemctl mask systemd-random-seed
}

installbootloader(){
        if [[ "$USE_GRUB" -eq 1 ]]
        then
                installbootloader-grub
        else
                installbootloader-systemd
        fi

        # ### Make the Boot files ###
        arch-chroot /mnt mkinitcpio -P
}

installbootloader-grub(){
        clear
        echo "### Installing GRUB... ____________________"

        if [[ "$USE_CRYPT" -eq 1 ]]
        then
                mv header.img /mnt/boot
                BOOTUUID=$(blkid -s UUID -o value $bootdev)
                arch-chroot /mnt sed -i "s|^GRUB_CMDLINE_LINUX=.*$|GRUB_CMDLINE_LINUX=\"rd.luks.name=$CRYPTHEADERUUID=cryptlvm rd.luks.options=$CRYPTHEADERUUID=header=/header.img:UUID=$BOOTUUID rd.luks.data=$CRYPTHEADERUUID=$realrootdev root=/dev/vg1/root rw rootflags=subvol=@ resume=$swapdev\"|" /etc/default/grub
        else   
                arch-chroot /mnt sed -i "s|^GRUB_CMDLINE_LINUX=.*$|GRUB_CMDLINE_LINUX=\"resume=$swapdev\"|" /etc/default/grub
        fi

        # faster grub boot time - displays no menu. be warned
        cat <<EOT >> /mnt/etc/default/grub
GRUB_FORCE_HIDDEN_MENU=true
GRUB_TIMEOUT=0
GRUB_TIMEOUT_STYLE=hidden
GRUB_HIDDEN_TIMEOUT=0
GRUB_HIDDEN_TIMEOUT_QUIET=true
GRUB_RECORDFAIL_TIMEOUT=0
EOT
 
        arch-chroot /mnt sed -i 's/^GRUB_GFXMODE=.*$/GRUB_GFXMODE=1920x1080x32/' /etc/default/grub
        arch-chroot /mnt sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT=.*$/GRUB_CMDLINE_LINUX_DEFAULT="quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 nowatchdog mitigations=off"/' /etc/default/grub
        arch-chroot /mnt sed -i 's/^#GRUB_DISABLE_OS_PROBER=.*$/GRUB_DISABLE_OS_PROBER="false"/' /etc/default/grub
        arch-chroot /mnt os-prober
        arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB --recheck
        arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
}

installbootloader-systemd(){
        clear
        echo "### Installing bootctl... ____________________"

        arch-chroot /mnt bootctl install
        
        if [[ "$USE_CRYPT" -eq 1 ]]
        then
                mv header.img /mnt/boot

                # create a luks key so we dont have to enter a passphase on boot
                arch-chroot /mnt dd bs=512 count=4 if=/dev/random of=/crypto_keyfile.bin iflag=fullblock
                arch-chroot /mnt chmod 600 /crypto_keyfile.bin
                arch-chroot /mnt cryptsetup luksAddKey $realrootdev /crypto_keyfile.bin --header /boot/header.img
                arch-chroot /mnt sed -i 's/FILES=()/FILES=(\/crypto_keyfile.bin)/' /etc/mkinitcpio.conf

                BOOTUUID=$(blkid -s UUID -o value $bootdev)

                options="rd.luks.name=$CRYPTHEADERUUID=cryptlvm rd.luks.options=$CRYPTHEADERUUID=header=/header.img:UUID=$BOOTUUID rd.luks.key=/crypto_keyfile.bin rd.luks.data=$CRYPTHEADERUUID=$realrootdev root=/dev/vg1/root rw rootflags=subvol=@ resume=$swapdev quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 nowatchdog mitigations=off"
        else
                options="root=UUID=$ROOTUUID rw rootflags=subvol=@ resume=$swapdev quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 nowatchdog mitigations=off" 
        fi

        cat <<EOT >> /mnt/boot/loader/entries/arch.conf
title   Arch Linux
linux   /vmlinuz-linux-zen
initrd  /intel-ucode.img
initrd  /initramfs-linux-zen.img
options $options
EOT
}

setupuser(){
        clear
        echo "### Setting up user... ____________________"

        arch-chroot /mnt useradd -m -G wheel $user
        arch-chroot /mnt sed -i 's/# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' /etc/sudoers
        echo "Defaults insults" >> /mnt/etc/sudoers
        echo "${user} ALL=(ALL) NOPASSWD: /usr/bin/mount" >> /mnt/etc/sudoers
        echo "${user} ALL=(ALL) NOPASSWD: /usr/bin/umount" >> /mnt/etc/sudoers
        echo "${user} ALL=(ALL) NOPASSWD: /usr/bin/sed" >> /mnt/etc/sudoers

        # Set root password
        echo "Setting user and root password..."
        echo "${user}:${password}" | arch-chroot /mnt chpasswd
        echo "root:${password}" | arch-chroot /mnt chpasswd

        # config files
        echo "Getting some config files..."
        arch-chroot /mnt curl -sL $BASE_URL/configs/home/.Xresources-dark -o /home/$user/.Xresources
        arch-chroot /mnt curl -sL $BASE_URL/configs/home/.bashrc -o /home/$user/.bashrc

        # add a dummy file to let bashrc know to run post-install on first login
        arch-chroot /mnt touch /home/$user/newbie

        # awesome tty login
        arch-chroot /mnt curl -sL $BASE_URL/configs/system/issue -o /etc/issue

        # set custom pacman.conf 
        arch-chroot /mnt mv /etc/pacman.conf /etc/pacman.conf.bak
        arch-chroot /mnt curl -sL $BASE_URL/configs/system/pacman.conf -o /etc/pacman.conf
        
        # Copy post-install file to /home/$user
        echo "Copy post-install file to /home/${user}..."
        arch-chroot /mnt curl -sL $BASE_URL/post-install -o /home/$user/post-install
        arch-chroot /mnt sed -i "s|^rootdev=.*$|rootdev=${rootdev}|" /home/$user/post-install
        arch-chroot /mnt sed -i "s|^USE_CRYPT=.*$|USE_CRYPT=${USE_CRYPT}|" /home/$user/post-install
        arch-chroot /mnt sed -i "s|^USE_RAID=.*$|USE_RAID=${USE_RAID}|" /home/$user/post-install
        arch-chroot /mnt sed -i "s|^USE_GRUB=.*$|USE_GRUB=${USE_GRUB}|" /home/$user/post-install
        arch-chroot /mnt chmod a+x /home/$user/post-install

        # Add shell-option to ~/.inputrc to enable case-insensitive tab completion
        if [ ! -a /mnt/home/$user/.inputrc ]; then echo '$include /etc/inputrc' > /mnt/home/$user/.inputrc; fi
        echo 'set completion-ignore-case On' >> /mnt/home/$user/.inputrc

        # remove last login message on console login
        arch-chroot /mnt touch /home/$user/.hushlogin

        # own that stuff!
        arch-chroot /mnt chown -R $user:$user /home/$user/
}

finish(){
        whiptail --backtitle "$BACKTITLE" --msgbox --title "Congratulations" "Install Complete\n\nReturn to main menu and select 'Finsh and Reboot'" --fb 0 78
}

rebootpc(){
        if (whiptail --backtitle "${BACKTITLE}" --yesno "Reboot?" --defaultno --fb 0 78) then
                clear
                umount -a
                reboot
        fi
}

# --------------------------------------------------------

checkconnection(){
        if [[ $(ping -q -w1 -c1 google.com &>/dev/null && echo online || echo offline) == "offline" ]]; 
            then
                whiptail --backtitle "$BACKTITLE" --msgbox --title "No Network Connection" "You need to be connected to the Internet.\n\nInstallation stopped." --fb 0 78
                exit
        fi
}

dependencies(){
        pacman -Sy --noconfirm archlinux-keyring
}

updatemirrors(){
        MIRROR_COUNTRY=$(echo $MIRROR_COUNTRY | tr '[:lower:]' '[:upper:]')
        reflector --verbose -c $MIRROR_COUNTRY -l 25 --age 12 -p https --sort rate --save /etc/pacman.d/mirrorlist
}

getpackagelist(){
        curl -sL $BASE_URL/packages -o /tmp/packages
}

initialise(){
        checkconnection
        dependencies
        updatemirrors
        getpackagelist

        sed -i '/ParallelDownloads/s/^[#[:space:]]*//g' /etc/pacman.conf
        sed -i '/Color/s/^[#[:space:]]*//g' /etc/pacman.conf
        sed -i '/Color/a ILoveCandy' /etc/pacman.conf
}

self_update(){
        curl -sL $BASE_URL/version -o /tmp/version
        value=$(</tmp/version)
        if (("$VERSION" < "$value")); then
                curl -sL $BASE_URL/install -o install
                chmod +x install
                exec install
                exit 1
        fi
}

# --------------------------------------------------------

while [[ $# -gt 0 ]]; do
        case "${1}" in
                -c)
                        swapoff -a
                        rm /tmp/packages
                        [[ -d /mnt/boot/efi ]] && umount -A /mnt/boot/efi
                        [[ -d /mnt/boot ]] && umount -A /mnt/boot
                        [[ -d /mnt ]] && umount -A /mnt; shift ;;
                -m)
                        MIRROR_COUNTRY="${2}" && shift 2 || shift ;;
                *)
                        echo "ERROR: Unrecognized installation option '${1}'."; shift 2 ;;
        esac
done

self_update

[[ ! -f /tmp/packages ]] && initialise

mainmenu