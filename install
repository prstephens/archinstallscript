#!/bin/bash

# Arch Linux Install Script 
# -------------------------
# author    : prstephens
#             https://github.com/prstephens           
# project   : https://github.com/prstephens/archinstallscript
# license   : LGPL-3.0 (http://opensource.org/licenses/lgpl-3.0.html)
# referance : https://wiki.archlinux.org/index.php/Installation_guide

# Globals
BACKTITLE="Arch Installer v3"
MIRRORLIST_URL="https://archlinux.org/mirrorlist/?country=GB&protocol=https&use_mirror_status=on"
BASE_URL="https://raw.githubusercontent.com/prstephens/archinstallscript/master/"

# --------------------------------------------------------

mainmenu(){
        if [ "${1}" = "" ]; then
                nextitem="."
        else
                nextitem=${1}
        fi
        options=()
        options+=("1)" "Partition disk (cfdisk)")
        options+=("2)" "Select partitions to mount")
        options+=("3)" "Setup user and root password")
        options+=("4)" "Install")
        options+=("" "")
        options+=("5)" "Finish and reboot")

        sel=$(whiptail --backtitle "${BACKTITLE}" --title "Main Menu" --menu "" --cancel-button "Exit" --default-item "${nextitem}" 20 78 0\
                "${options[@]}" \
                3>&1 1>&2 2>&3)
        if [ "$?" = "0" ]; then
                case ${sel} in
                        "1)")
                                diskpartcfdisk
                                nextitem="2)"
                        ;;
                        "2)")
                                choosepartitions
                                nextitem="3)"
                        ;;
                        "3)")
                                getuserinfo
                                nextitem="4)"
                        ;;
                        "4)")
                                performinstall
                                configuration
                                installbootloader
                                setupuser
                                finish
                                nextitem="5)"
                        ;;
                        "5)")
                                rebootpc
                                nextitem="5)"
                        ;;
                esac
                mainmenu "${nextitem}"
        else
                clear
        fi
}

diskpartcfdisk(){
	device=$( selectdisk "Edit Partitions (cfdisk)" )
        if [ "$?" = "0" ]; then
            clear
            cfdisk ${device}
        fi
}

selectdisk(){
        items=$(lsblk -d -p -n -l -o NAME,SIZE -e 7,11)
        options=()
        IFS_ORIG=$IFS
        IFS=$'\n'
        for item in ${items}
        do  
                options+=("${item}" "")
        done
        IFS=$IFS_ORIG
        result=$(whiptail --backtitle "${BACKTITLE}" --title "${1}" --menu "" 0 78 0 "${options[@]}" 3>&1 1>&2 2>&3)
        if [ "$?" != "0" ]
        then
                return 1
        fi
        echo ${result%%\ *}
        return 0    
}

choosepartitions(){
	itemsinfo=$(lsblk -o NAME,SIZE,FSTYPE)
        items=$(lsblk -p -n -l -o NAME -e 7,11)
        deviceitems=$(lsblk -d -n -l -o NAME -e 7,11)
        options=()
        optionstoremove=()
        IFS_ORIG=$IFS
        IFS=$'\n'
        for item in ${deviceitems}
        do  
                optionstoremove+=("/dev/${item}")
        done
        for item in ${items}
        do  
                if [[ ! " ${optionstoremove[@]} " =~ " ${item} " ]]; then
                        options+=("${item}" "")
                fi
        done
	bootdev=$(whiptail --backtitle "${BACKTITLE}" --title "Select Boot partition" --menu "${itemsinfo}" --default-item "${bootdev}" 0 78 0 \
		"none" "-" \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	else
		if [ "${bootdev}" = "none" ]; then
			bootdev=
		fi
	fi
	swapdev=$(whiptail --backtitle "${BACKTITLE}" --title "Select Swap partition" --menu "${itemsinfo}" --default-item "${swapdev}" 0 78 0 \
		"none" "-" \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	else
		if [ "${swapdev}" = "none" ]; then
			swapdev=
		fi
	fi
	rootdev=$(whiptail --backtitle "${BACKTITLE}" --title "Select Root partition" --menu "${itemsinfo}" --default-item "${rootdev}" 0 78 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	fi
	realrootdev=${rootdev}
	
        msg=""
	msg=${msg}"Boot     : "${bootdev}"\n"
	msg=${msg}"Swap     : "${swapdev}"\n"
	msg=${msg}"Root     : "${rootdev}"\n\n"
	if (whiptail --backtitle "${BACKTITLE}" --title "Are these values correct?" --yesno "${msg}" 0 78) then
		mainmenu "3)"
        else
                choosepartitions
        fi
}

getuserinfo(){
        hostname=$(whiptail --backtitle "$BACKTITLE" --inputbox "Enter hostname:" 8 78 3>&1 1>&2 2>&3)
        user=$(whiptail --backtitle "$BACKTITLE" --inputbox "Enter admin username:" 8 78 3>&1 1>&2 2>&3)

        password="x"
        password2="xx"
        passphrase_invalid_message=""

        while [[ "$password" != "$password2" ]]; do

            password=$(whiptail --backtitle "$BACKTITLE" --passwordbox "${passphrase_invalid_message}Please enter the admin password:" 8 78 3>&1 1>&2 2>&3)
            password2=$(whiptail --backtitle "$BACKTITLE" --passwordbox "Please repeat the admin password:" 8 78 3>&1 1>&2 2>&3)
            passphrase_invalid_message="Passwords do not match! "

        done

        msg=${msg}"Hostname : "${hostname}"\n"
        msg=${msg}"User     : "${user}"\n\n"

}

performinstall(){
        whiptail --backtitle "${BACKTITLE}" --title "Are you sure?" --yesno "${msg}" 0 78 3>&1 1>&2 2>&3
        if [ ! "$?" = "0" ]; then
		mainmenu "1)"
	fi
        
        clear

        timedatectl set-ntp true

        # Setup the partitions
        read -p "You are about to wipe ${rootdev}? [y/N]: " wipe
        if [ $wipe = 'y' ]
        then
                mkfs.ext4 $rootdev
        else
                echo "Install stopped"
                exit
        fi

        if [ ! "${swapdev}" = "" ]
        then
                mkswap $swapdev
                swapon $swapdev
        fi

        #root
        mount $rootdev /mnt

        echo "Starting install.."
        pacstrap /mnt ${package_list}
        #pacstrap /mnt base base-devel linux-firmware linux-zen linux-zen-headers intel-ucode refind efibootmgr ntfs-3g networkmanager dnsutils reflector nfs-utils xorg xorg-server xorg-xinit nvidia-dkms nvidia-settings nvidia-utils nano nano-syntax-highlighting sudo git bluez bluez-utils pulseaudio rxvt-unicode wget cups hplip archlinux-keyring pacman-contrib anything-sync-daemon openssh ncdu glances htop

        # Generate fstab
        genfstab -U /mnt >> /mnt/etc/fstab
}

installbootloader(){
        # Install bootloader
        # rEFInd
        clear

        echo "Installing rEFInd..."

        ROOTUUID=$(blkid -s UUID -o value $rootdev)

        arch-chroot /mnt mkdir /boot/efi

        # mount windows EFI boot (on sda1)
        arch-chroot /mnt mount $bootdev /boot/efi

        # clean it up before install
        [[ -d /mnt/boot/efi/EFI/refind ]] && rm -rdf /mnt/boot/efi/EFI/refind

        arch-chroot /mnt refind-install

        # early KMS NVIDIA module and silent boot parameters
        cat <<EOT > /mnt/boot/refind_linux.conf
"Boot with standard options"  "rw root=UUID=${ROOTUUID} quiet loglevel=3 rd.udev.log_priority=3 nvidia-drm.modeset=1 nouveau.modeset=0 initrd=boot\intel-ucode.img initrd=boot\initramfs-linux-zen.img"
"Boot to single-user mode"    "rw root=UUID=${ROOTUUID} loglevel=3 quiet single"
"Boot with minimal options"   "rw root=UUID=${ROOTUUID}"
EOT

        # Morpheous theme for refind 
        arch-chroot /mnt mkdir /boot/efi/EFI/refind/themes
        arch-chroot /mnt git clone https://github.com/prstephens/Matrix-rEFInd.git /boot/efi/EFI/refind/themes/Matrix-rEFInd

        cat <<EOT > /mnt/boot/efi/EFI/refind/refind.conf
resolution 1920 1080
timeout 5
default_selection Microsoft
include themes/Matrix-rEFInd/theme.conf
EOT

        # early KMS NVIDIA module load
        arch-chroot /mnt sed -i 's/^MODULES=.*$/MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)/' /etc/mkinitcpio.conf
        arch-chroot /mnt mkinitcpio -P
}

setupuser(){
        # Create new user
        arch-chroot /mnt useradd -m -G wheel $user
        arch-chroot /mnt sed -i 's/# %wheel ALL=(ALL) ALL/%wheel ALL=(ALL) ALL/' /etc/sudoers
        echo "Defaults insults" >> /mnt/etc/sudoers
        echo "${user} ALL=(ALL) NOPASSWD: /usr/bin/mount" >> /mnt/etc/sudoers
        echo "${user} ALL=(ALL) NOPASSWD: /usr/bin/umount" >> /mnt/etc/sudoers
        echo "${user} ALL=(ALL) NOPASSWD: /usr/bin/sed" >> /mnt/etc/sudoers

        # Set root password
        echo "Setting user and root password..."
        echo "${user}:${password}" | arch-chroot /mnt chpasswd
        echo "root:${password}" | arch-chroot /mnt chpasswd

        # config files
        echo "Getting some sweet config files..."
        arch-chroot /mnt curl -sL $BASE_URL/sweet/.Xresources -o /home/$user/.Xresources
        arch-chroot /mnt curl -sL $BASE_URL/sweet/.bashrc -o /home/$user/.bashrc
        arch-chroot /mnt curl -sL $BASE_URL/sweet/issue -o /etc/issue

        # set custom pacman.conf 
        arch-chroot /mnt mv /etc/pacman.conf /etc/pacman.conf.bak
        arch-chroot /mnt curl -sL $BASE_URL/sweet/pacman.conf -o /etc/pacman.conf
        
        # Copy post-install file to /home/$user
        echo "Copy post-install file to /home/${user}..."
        arch-chroot /mnt curl -sL $BASE_URL/post-install -o /home/$user/post-install
        arch-chroot /mnt chown $user:$user /home/$user/post-install
        arch-chroot /mnt chmod a+x /home/$user/post-install

        # Add shell-option to ~/.inputrc to enable case-insensitive tab completion
        if [ ! -a /mnt/home/$user/.inputrc ]; then echo '$include /etc/inputrc' > /mnt/home/$user/.inputrc; fi
        echo 'set completion-ignore-case On' >> /mnt/home/$user/.inputrc

        # Create user xinit config file 
        echo "Creating .xinitrc file..."
        head -n -5 /mnt/etc/X11/xinit/xinitrc >> /mnt/home/$user/.xinitrc
        arch-chroot /mnt chown $user:$user /home/$user/.xinitrc

        cat >> /mnt/home/${user}/.xinitrc <<EOT 
xrandr --setprovideroutputsource modesetting NVIDIA-0
xrandr --auto
EOT

}

configuration(){
        clear

        # Set Cloudfare as our DNS
        cat <<EOT > /mnt/etc/resolv.conf
nameserver 1.1.1.1
nameserver 1.0.0.1
EOT

        chattr +i /mnt/etc/resolv.conf

        cat <<EOT >> /mnt/etc/hosts
192.168.1.192   rainbowdash.localdomain rainbowdash
192.168.1.66    libreelec.localdomain libreelec
EOT

        echo "Updating pacman mirrors to awesomeness..."
        # Update pacman mirror list
        arch-chroot /mnt reflector --verbose -c GB -l 25 --age 12 -p http -p https --sort rate --save /etc/pacman.d/mirrorlist

        echo "Setting up spacetime continuum..."
        # Set date time
        arch-chroot /mnt ln -sf /usr/share/zoneinfo/Europe/London /etc/localtime
        arch-chroot /mnt hwclock --systohc

        # Set locale to en_US.UTF-8 UTF-8
        arch-chroot /mnt sed -i '/en_GB.UTF-8 UTF-8/s/^#//g' /etc/locale.gen
        arch-chroot /mnt locale-gen
        echo "LANG=en_GB.UTF-8" >> /mnt/etc/locale.conf

        # Set the console keymap
        echo "KEYMAP=uk" >> /mnt/etc/vconsole.conf

        # Set hostname
        echo "${hostname}" > /mnt/etc/hostname
        echo "127.0.1.1 ${hostname}.localdomain  ${hostname}" >> /mnt/etc/hosts

        # NVIDIA configuration
        arch-chroot /mnt curl -sL $BASE_URL/sweet/xorg.conf -o /etc/X11/xorg.conf

        cat <<EOT > /mnt/etc/X11/xorg.conf.d/20-nvidia.conf
Section "OutputClass"
Identifier "intel"
MatchDriver "i915"
Driver "modesetting"
EndSection

Section "OutputClass"
Identifier "nvidia"
MatchDriver "nvidia-drm"
Driver "nvidia"
Option "AllowEmptyInitialConfiguration"
Option "PrimaryGPU" "yes"
ModulePath "/usr/lib/nvidia/xorg"
ModulePath "/usr/lib/xorg/modules"
EndSection
EOT

        # NVIDIA pacman hook configuration - update initramfs after driver update
cat <<EOT > /mnt/etc/pacman.d/hooks/nvidia.hook
[Trigger]
Operation=Install
Operation=Upgrade
Operation=Remove
Type=Package
Target=nvidia-dkms
Target=linux-zen

[Action]
Description=Update Nvidia module in initcpio
Depends=mkinitcpio
When=PostTransaction
NeedsTargets
Exec=/bin/sh -c 'while read -r trg; do case $trg in linux-zen) exit 0; esac; done; /usr/bin/mkinitcpio -P'
EOT

        # Set keyboard FN keys to act normal!
        echo "options hid_apple fnmode=2" > /mnt/etc/modprobe.d/hid_apple.conf
        
        # nano syntax highlighting
        echo "include /usr/share/nano/*.nanorc" >> /mnt/etc/nanorc

        # swappiness config for swap
        echo "vm.swappiness=10" >> /mnt/etc/sysctl.d/99-swappiness.conf

        # Set correct sound card for PulseAudio
        echo "set-default-sink output alsa_output.pci-0000_00_1f.3.analog-stereo" >> /mnt/etc/pulse/default.pa
        arch-chroot /mnt sed -i '/load-module module-suspend-on-idle/ s/^#*/#/' /etc/pulse/default.pa

        # Create the pacman mirrorlist updater service
        cat <<EOT > /mnt/etc/systemd/system/reflector.service
[Unit]
Description=Pacman mirrorlist update
Wants=network-online.target
After=network-online.target nss-lookup.target

[Service]
Type=oneshot
ExecStart=/usr/bin/reflector -c GB -l 25 --age 12 -p http -p https --sort rate --save /etc/pacman.d/mirrorlist

[Install]
WantedBy=multi-user.target
EOT

        # Enable services
        echo "Enabling services..."
        arch-chroot /mnt systemctl enable NetworkManager.service
        arch-chroot /mnt systemctl enable bluetooth.service
        arch-chroot /mnt systemctl enable cups.service
        arch-chroot /mnt systemctl enable reflector
        arch-chroot /mnt systemctl enable reflector.timer
        arch-chroot /mnt systemctl enable fstrim.timer
}

finish(){
        whiptail --backtitle "$BACKTITLE" --msgbox --title "Congratulations" "Install Complete\n\nReturn to main menu and select 'Finsh and Reboot'" 0 78
        nextitem="5)"
}

# --------------------------------------------------------

checkconnection(){
        if [[ $(ping -q -w1 -c1 google.com &>/dev/null && echo online || echo offline) == "offline" ]]; 
            then
                whiptail --backtitle "$BACKTITLE" --msgbox --title "No Network Connection" "You need to be connected to the Internet.\n\nInstallation stopped." 0 78
                exit
        fi
}

updatemirrors(){
        curl -sL "$MIRRORLIST_URL" | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 5 - > /etc/pacman.d/mirrorlist
}

dependencies(){
        pacman -Sy --noconfirm pacman-contrib
}

getpackagelist(){
        curl -sL $BASE_URL/packages -o /tmp/packages
        sed -i '/^\s*$/d' /tmp/packages
        sed -i '/^#/ d' /tmp/packages

        # base packages REQUIRED
        package_list="base base-devel linux-firmware"

        while read line
        do
                package_list="$package_list $(echo $line | sed 's/"//g')"
        done < /tmp/packages
}

initialise(){
        checkconnection
        dependencies
        updatemirrors
        getpackagelist
}

# --------------------------------------------------------

[[ ! -f /tmp/packages ]] && initialise

mainmenu