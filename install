#!/bin/bash

# Arch Linux Install Script 
# -------------------------
# author    : prstephens
#             https://github.com/prstephens           
# project   : https://github.com/prstephens/archinstallscript
# license   : LGPL-3.0 (http://opensource.org/licenses/lgpl-3.0.html)
# referance : https://wiki.archlinux.org/index.php/Installation_guide

# Globals
BACKTITLE="Arch Installer v3"
MIRRORLIST_URL="https://archlinux.org/mirrorlist/?country=GB&protocol=https&use_mirror_status=on"
BASE_URL="https://raw.githubusercontent.com/prstephens/archinstallscript/master/"

# --------------------------------------------------------

mainmenu(){
        if [ "${1}" = "" ]; then
                nextitem="."
        else
                nextitem=${1}
        fi
        options=()
        options+=("1)" "Partition disk (cfdisk)")
        options+=("2)" "Select partitions to mount")
        options+=("3)" "Install the base System")
        options+=("" "")
        options+=("4)" "Finish and reboot")

        sel=$(whiptail --backtitle "${BACKTITLE}" --title "Main Menu" --menu "" --cancel-button "Exit" --default-item "${nextitem}" 20 78 0\
                "${options[@]}" \
                3>&1 1>&2 2>&3)
        if [ "$?" = "0" ]; then
                case ${sel} in
                        "1)")
                                diskpartcfdisk
                                nextitem="2)"
                        ;;
                        "2)")
                                mountpartitions
                                nextitem="3)"
                        ;;
                        "3)")
                                performinstall
                                nextitem="4)"
                        ;;
                        "4)")
                                rebootpc
                                nextitem="4)"
                        ;;
                esac
                mainmenu "${nextitem}"
        else
                clear
        fi
}

diskpartcfdisk(){
	device=$( selectdisk "Edit Partitions (cfdisk)" )
        if [ "$?" = "0" ]; then
            clear
            cfdisk ${device}
        fi
}

selectdisk(){
        items=$(lsblk -d -p -n -l -o NAME,SIZE -e 7,11)
        options=()
        IFS_ORIG=$IFS
        IFS=$'\n'
        for item in ${items}
        do  
                options+=("${item}" "")
        done
        IFS=$IFS_ORIG
        result=$(whiptail --backtitle "${BACKTITLE}" --title "${1}" --menu "" 0 78 0 "${options[@]}" 3>&1 1>&2 2>&3)
        if [ "$?" != "0" ]
        then
                return 1
        fi
        echo ${result%%\ *}
        return 0    
}

mountpartitions(){
        itemsinfo=$(lsblk -o NAME,SIZE,FSTYPE)
        items=$(lsblk -p -n -l -o NAME -e 7,11)
        deviceitems=$(lsblk -d -n -l -o NAME -e 7,11)
        options=()
        optionstoremove=()
        IFS_ORIG=$IFS
        IFS=$'\n'
        for item in ${deviceitems}
        do  
                optionstoremove+=("/dev/${item}")
        done
        for item in ${items}
        do  
                if [[ ! " ${optionstoremove[@]} " =~ " ${item} " ]]; then
                        options+=("${item}" "")
                fi
        done
        IFS=$IFS_ORIG
        result=$(whiptail --backtitle "${BACKTITLE}" --title "${1}" --menu "${itemsinfo}" 0 78 0 "${options[@]}" 3>&1 1>&2 2>&3)
        if [ "$?" != "0" ]
        then
                return 1
        fi
        echo ${result%%\ *}
        return 0    
}

rebootpc(){
        if (whiptail --backtitle "${BACKTITLE}" --yesno "Reboot?" --defaultno 8 78) then
                clear
                umount -a
                reboot
        fi
}

performinstall(){
        clear

        # Set up time
        echo "Setting date and time..."
        timedatectl set-ntp true

        # Setup the partitions
        read -p 'You are about to wipe /dev/sdb2? [y/N]: ' wipe
        if [ $wipe = 'y' ]
        then
                mkfs.ext4 /dev/sdb2
        else
                echo "Install stopped"
                exit
        fi

        #swap
        mkswap /dev/sdb1
        swapon /dev/sdb1

        #root
        mount /dev/sdb2 /mnt

        #data
        mkdir /mnt/data
        mount /dev/sdb3 /mnt/data

        # Install Arch Linux
        echo "Starting install.."
        pacstrap /mnt $package_list

        # Generate fstab
        genfstab -U /mnt >> /mnt/etc/fstab
}

installBootloader(){
        # Install bootloader
        # rEFInd
        clear

        echo "Installing rEFInd..."

        ROOTUUID=$(blkid -s UUID -o value /dev/sdb2)

        arch-chroot /mnt mkdir /boot/efi

        # mount windows EFI boot (on sda1)
        arch-chroot /mnt mount /dev/sda1 /boot/efi

        # clean it up before install
        [[ -d /mnt/boot/efi/EFI/refind ]] && rm -rdf /mnt/boot/efi/EFI/refind

        arch-chroot /mnt refind-install

        # early KMS NVIDIA module and silent boot parameters
        cat <<EOT > /mnt/boot/refind_linux.conf
"Boot with standard options"  "rw root=UUID=${ROOTUUID} quiet loglevel=3 rd.udev.log_priority=3 nvidia-drm.modeset=1 nouveau.modeset=0 initrd=boot\intel-ucode.img initrd=boot\initramfs-linux-zen.img"
"Boot to single-user mode"    "rw root=UUID=${ROOTUUID} loglevel=3 quiet single"
"Boot with minimal options"   "rw root=UUID=${ROOTUUID}"
EOT

        # Morpheous theme for refind 
        arch-chroot /mnt mkdir /boot/efi/EFI/refind/themes
        arch-chroot /mnt git clone https://github.com/prstephens/Matrix-rEFInd.git /boot/efi/EFI/refind/themes/Matrix-rEFInd

        cat <<EOT > /mnt/boot/efi/EFI/refind/refind.conf
resolution 1920 1080
timeout 5
default_selection Microsoft
include themes/Matrix-rEFInd/theme.conf
EOT

        # early KMS NVIDIA module load
        arch-chroot /mnt sed -i 's/^MODULES=.*$/MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)/' /etc/mkinitcpio.conf
        arch-chroot /mnt mkinitcpio -P
}

setupUser(){
        # Create new user
        arch-chroot /mnt useradd -m -G wheel $user
        arch-chroot /mnt sed -i 's/# %wheel ALL=(ALL) ALL/%wheel ALL=(ALL) ALL/' /etc/sudoers
        echo "Defaults insults" >> /mnt/etc/sudoers

        # Set root password
        echo "Setting user and root password..."
        echo "$user:$password" | chpasswd --root /mnt
        echo "root:$password" | chpasswd --root /mnt

        # config files
        echo "Getting some sweet config files..."
        arch-chroot /mnt curl -sL $BASE_URL/sweet/.Xresources -o /home/$user/.Xresources
        arch-chroot /mnt curl -sL $BASE_URL/sweet/.bashrc -o /home/$user/.bashrc
        arch-chroot /mnt curl -sL $BASE_URL/sweet/issue -o /etc/issue

        # set custom pacman.conf 
        arch-chroot /mnt mv /etc/pacman.conf /etc/pacman.conf.bak
        arch-chroot /mnt curl -sL $BASE_URL/sweet/pacman.conf -o /etc/pacman.conf
        
        # Get yay ready 
        echo "Getting yay all ready for ${user}..."
        arch-chroot /mnt git clone https://aur.archlinux.org/yay.git /home/$user/yay
        arch-chroot /mnt chown -R $user:$user /home/$user/yay/

        # Copy post-install file to /home/$user
        echo "Copy post-install file to /home/${user}..."
        arch-chroot /mnt curl -sL $BASE_URL/post-install -o /home/$user/post-install
        arch-chroot /mnt chown $user:$user /home/$user/post-install
        arch-chroot /mnt chmod a+x /home/$user/post-install

        # Add shell-option to ~/.inputrc to enable case-insensitive tab completion
        if [ ! -a /mnt/home/$user/.inputrc ]; then echo '$include /etc/inputrc' > /mnt/home/$user/.inputrc; fi
        echo 'set completion-ignore-case On' >> /mnt/home/$user/.inputrc

        # Create user xinit config file 
        echo "Creating .xinitrc file..."
        head -n -5 /mnt/etc/X11/xinit/xinitrc >> /mnt/home/$user/.xinitrc
        arch-chroot /mnt chown $user:$user /home/$user/.xinitrc

        cat >> /mnt/home/${user}/.xinitrc <<EOT 
xrandr --setprovideroutputsource modesetting NVIDIA-0
xrandr --auto
EOT

}

configuration(){
        clear

        # Set Cloudfare as our DNS
        cat <<EOT > /mnt/etc/resolv.conf
nameserver 1.1.1.1
nameserver 1.0.0.1
EOT

        chattr +i /mnt/etc/resolv.conf

        cat <<EOT >> /mnt/etc/hosts
192.168.1.192   rainbowdash.localdomain rainbowdash
192.168.1.66    libreelec.localdomain libreelec
EOT

        echo "Updating pacman mirrors to awesomeness..."
        # Update pacman mirror list
        arch-chroot /mnt reflector --verbose -c GB -l 25 --age 12 -p http -p https --sort rate --save /etc/pacman.d/mirrorlist

        echo "Setting up spacetime continuum..."
        # Set date time
        arch-chroot /mnt ln -sf /usr/share/zoneinfo/Europe/London /etc/localtime
        arch-chroot /mnt hwclock --systohc

        # Set locale to en_US.UTF-8 UTF-8
        arch-chroot /mnt sed -i '/en_GB.UTF-8 UTF-8/s/^#//g' /etc/locale.gen
        arch-chroot /mnt locale-gen
        echo "LANG=en_GB.UTF-8" >> /mnt/etc/locale.conf

        # Set the console keymap
        echo "KEYMAP=uk" >> /mnt/etc/vconsole.conf

        # Set hostname
        echo "${hostname}" > /mnt/etc/hostname
        echo "127.0.1.1 ${hostname}.localdomain  ${hostname}" >> /mnt/etc/hosts

        # NVIDIA configuration
        cat <<EOT > /mnt/etc/X11/xorg.conf.d/20-nvidia.conf
Section "OutputClass"
Identifier "intel"
MatchDriver "i915"
Driver "modesetting"
EndSection

Section "OutputClass"
Identifier "nvidia"
MatchDriver "nvidia-drm"
Driver "nvidia"
Option "AllowEmptyInitialConfiguration"
Option "PrimaryGPU" "yes"
ModulePath "/usr/lib/nvidia/xorg"
ModulePath "/usr/lib/xorg/modules"
EndSection
EOT

        # Set keyboard FN keys to act normal!
        echo "options hid_apple fnmode=2" > /mnt/etc/modprobe.d/hid_apple.conf
        
        # nano syntax highlighting
        echo "include /usr/share/nano/*.nanorc" >> /mnt/etc/nanorc

        # swappiness config for swap
        echo "vm.swappiness=10" >> /mnt/etc/sysctl.d/99-swappiness.conf

        # Set correct sound card for PulseAudio
        echo "set-default-sink output alsa_output.pci-0000_00_1f.3.analog-stereo" >> /mnt/etc/pulse/default.pa

        # Create the pacman mirrorlist updater service
        cat <<EOT > /mnt/etc/systemd/system/reflector.service
[Unit]
Description=Pacman mirrorlist update
Wants=network-online.target
After=network-online.target nss-lookup.target

[Service]
Type=oneshot
ExecStart=/usr/bin/reflector -c GB -l 25 --age 12 -p http -p https --sort rate --save /etc/pacman.d/mirrorlist

[Install]
WantedBy=multi-user.target
EOT

        # Enable services
        echo "Enabling services..."
        arch-chroot /mnt systemctl enable NetworkManager.service
        arch-chroot /mnt systemctl enable bluetooth.service
        arch-chroot /mnt systemctl enable cups.service
        arch-chroot /mnt systemctl enable reflector
        arch-chroot /mnt systemctl enable reflector.timer
        arch-chroot /mnt systemctl enable fstrim.timer

}

getinfo(){
        hostname=$(whiptail --backtitle "$BACKTITLE" --inputbox "Enter hostname:" 8 78 3>&1 1>&2 2>&3)
        user=$(whiptail --backtitle "$BACKTITLE" --inputbox "Enter admin username:" 8 78 3>&1 1>&2 2>&3)

        password="x"
        password2="xx"
        passphrase_invalid_message=""

        while [[ "$password" != "$password2" ]]; do

            password=$(whiptail --backtitle "$BACKTITLE" --passwordbox "${passphrase_invalid_message}Please enter the admin password:" 8 78 3>&1 1>&2 2>&3)
            password2=$(whiptail --backtitle "$BACKTITLE" --passwordbox "Please repeat the admin password:" 8 78 3>&1 1>&2 2>&3)
            passphrase_invalid_message="Passwords do not match! "

        done
}

# --------------------------------------------------------

checkconnection(){
        if [[ $(ping -q -w1 -c1 google.com &>/dev/null && echo online || echo offline) == "offline" ]]; 
            then
                whiptail --backtitle "$BACKTITLE" --msgbox --title "No Network Connection" "You need to be connected to the Internet.\n\nInstallation stopped." 20 78
                exit
        fi
}

checkprogress(){
        i="0"
        while (true)
        do
            proc=$(ps aux | grep -v grep | grep -e $1)
            if [[ "$proc" == "" ]]; then break; fi
            #sleep 1
            echo $i
            i=$(expr $i + 1)
        done
        # If it is done then display 100%
        echo 100
        # Give it some time to display the progress to the user.
        sleep 2
}

updatemirrors(){
        curl -sL "$MIRRORLIST_URL" | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 5 - > /etc/pacman.d/mirrorlist &
        {
            checkprogress "rankmirrors"

        } | whiptail --gauge --title "$BACKTITLE" "Ranking Mirrors..." 8 78 0
}

dependencies(){
        pacman -Sy --noconfirm pacman-contrib > /dev/null 2>&1 &
        {
            checkprogress "pacman"

        } | whiptail --gauge --title "$BACKTITLE" "Installing dependancies..." 8 78 0
}

getpackagelist(){
        curl -sL $BASE_URL/packages -o /tmp/packages
        while read line
        do
            package_list="$package_list $(echo $line)"
        done < /tmp/packages
}

initialise(){
        checkconnection
        updatemirrors
        dependencies
        getpackagelist
}

# --------------------------------------------------------

[[ ! -f /tmp/packages ]] && initialise

mainmenu
#getinfo
#performInstall
#configuration
#installBootloader
#setupUser