#! /bin/bash

# Arch Linux Post Install Script 
# ------------------------------
# author    : prstephens
#             https://github.com/prstephens           
# project   : https://github.com/prstephens/archinstallscript
# license   : LGPL-3.0 (http://opensource.org/licenses/lgpl-3.0.html)
# referance : https://wiki.archlinux.org/index.php/Installation_guide

BACKTITLE="Arch Installer v3"
BASE_URL="https://raw.githubusercontent.com/prstephens/archinstallscript/master/"

# --------------------------------------------------------

mainmenu(){
        if [ "${1}" = "" ]; then
            nextitem="."
        else
            nextitem=${1}
        fi
        options=()
        options+=("1)" "Plasma DE")
        options+=("2)" "Gnome DE")
        options+=("3)" "Applications")
        options+=("4)" "QEMU/KVM")
        options+=("5)" "Java Development Environment")

        sel=$(whiptail --backtitle "${BACKTITLE}" --title "Arch Linux Post Installer" --menu "" --cancel-button "Exit" --default-item "${nextitem}" 0 0 0 \
            "${options[@]}" \
            3>&1 1>&2 2>&3)
        if [ "$?" = "0" ]; then
            case ${sel} in
                "1)")
                    install_plasma
                    nextitem="2)"
                ;;
                "2)")
                    install_gnome
                    nextitem="3)"
                ;;
                "3)")
                    install_apps
                    nextitem="4)"
                ;;
                "4)")
                    install_qemu
                    nextitem="5)"
                ;;
                "5)")
                    install_dev
                    nextitem="5)"
                ;;
            esac
            mainmenu "${nextitem}"
        else
            clear
        fi
}

install_fonts(){
        echo "Installing fonts..."
        #yay -S nerd-fonts-complete
        yay -S otf-san-francisco

        # Copy Windows fonts over
        echo "Copying Windows fonts..."
        sudo mkdir /usr/share/fonts/windowsfonts
        sudo mkdir /windows10
        sudo mount /dev/sda3 /windows10
        sudo cp /windows10/Windows/Fonts/* /usr/share/fonts/windowsfonts
        fc-cache -f
        sudo umount /windows10
}

install_preload(){
        echo "Installing preload..."
        yay -S preload
        sudo systemctl enable --now preload
}

restore_bigsur(){
        konsave -i $HOME/bigsur.knsv
        konsave -a 1
}

install_plasma(){    
        clear
        
        echo "Installing Plasma.."
        sudo pacman -S plasma-meta ark dolphin xscreensaver konsole sshfs kvantum-qt5
        yay -S latte-dock plasma5-applets-kde-arch-update-notifier
        
        # konsave
        sudo pacman -S python-pip
        sudo python -m pip install konsave

        # mac os big sur dark theme with latte config. complete restore.
        curl -sL $BASE_URL/sweet/bigsur.knsv -o $HOME/bigsur.knsv

        # xscreensaver settings - 10 min timeout - GL matrix 
        curl -sL $BASE_URL/sweet/.xscreensaver -o $HOME/.xscreensaver
        if [ ! -d $HOME/.config/autostart/ ];then mkdir $HOME/.config/autostart;fi
        curl -sL $BASE_URL/sweet/xscreensaver.desktop -o $HOME/.config/autostart/xscreensaver.desktop

        # Dracula colour scheme for Konsole
        curl -sL $BASE_URL/sweet/Dracula.colorscheme -o $HOME/.local/konsole/Dracula.colorscheme

        # xinit config
        sudo cat <<EOT >> $HOME/.xinitrc
nvidia-settings --load-config-only &
export DESKTOP_SESSION=plasma
exec startplasma-x11
EOT
        echo '[[ ! $DISPLAY && $XDG_VTNR -eq 1 ]] && exec startx' >> $HOME/.bash_profile
        
        install_fonts
        install_preload

        # apply MacOs bigsur theme
        restore_bigsur
}

install_gnome(){
        clear
        
        echo "Installing Gnome.."
        sudo pacman -S gnome gnome-tweaks firefox flatpak nemo nemo-fileroller nemo-preview gtk-engine-murrine sassc seahorse gnome-notes gparted
        yay -S chrome-gnome-shell fancontrol-gui pamac-aur

        # xscreensaver settings - 10 min timeout - GL matrix 
        curl -sL $BASE_URL/sweet/.xscreensaver -o $HOME/.xscreensaver
        if [ ! -d $HOME/.config/autostart/ ];then mkdir $HOME/.config/autostart;fi
        curl -sL $BASE_URL/sweet/xscreensaver.desktop -o $HOME/.config/autostart/xscreensaver.desktop

        xdg-mime default nemo.desktop inode/directory application/x-gnome-saved-search
        gsettings set org.cinnamon.desktop.default-applications.terminal exec urxvt
        gsettings set org.cinnamon.desktop.default-applications.terminal exec-arg -e

        # Orchis-pink-dark theme
        git clone https://github.com/prstephens/Orchis-theme.git /tmp/Orchis-theme
        /tmp/Orchis-theme/install.sh -d $HOME/.themes -t pink -c dark
        gsettings set org.gnome.desktop.interface gtk-theme Orchis-pink-dark-compact
        
        # Tela icon theme
        git clone https://github.com/prstephens/Tela-icon-theme.git /tmp/Tela-icon-theme
        /tmp/Tela-icon-theme/install.sh -d $HOME/.icons pink
        gsettings set org.gnome.desktop.interface icon-theme Tela-pink-dark

        #install flatpak user repo
        flatpak --user remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

        #install GKraken for NZXT pump configuration
        flatpak install flathub com.leinardi.gkraken

        # xinit config
        sudo cat <<EOT >> $HOME/.xinitrc
export XDG_SESSION_TYPE=x11
export GDK_BACKEND=x11
exec gnome-session
EOT

        echo '[[ ! $DISPLAY && $XDG_VTNR -eq 1 ]] && exec startx' >> $HOME/.bash_profile
        
        install_fonts
        install_preload

        # missing firmware for the mkinitcpio warnings
        yay -S aic94xx-firmware wd719x-firmware upd72020x-fw

        whiptail --backtitle "${BACKTITLE}" --title "GDM" --yesno "Do you want to enable GDM?" 0 78 3>&1 1>&2 2>&3
        if [ "$?" = "0" ]; then
		sudo systemctl enable --now gdm
	fi
}

change-gdm-wallpaper(){
        clear
        if [ -z "$1" ]; then
                echo "Usage: ./change-gdm-wallpaper <path/to/picture.png>"
        fi

        if [ ! -f $1 ]; then
                echo Error: could not find file $1
        fi

        PIC=$1
        WORKDIR=${HOME}/change-gdm-wallpaper-tmp
        DATE=$(date +"%Y-%m-%d_%T")

        if [ ! -d $WORKDIR ]; then
                mkdir -p $WORKDIR/theme
        fi

        cd "${WORKDIR}/theme"
        mkdir -p backups

        IFS='/' read -r -a array <<< "$PIC"
        cp $PIC .
        PIC=${array[-1]}
        chmod 777 $PIC

        SHARE=/usr/share/gnome-shell/
        GRESOURCE=gnome-shell-theme.gresource
        CSS=gnome-shell.css
        XMLRES=gnome-shell-theme.gresource.xml

        echo Backing up ${SHARE}${GRESOURCE}...
        cp ${SHARE}${GRESOURCE} "backups/${GRESOURCE}.bak.${DATE}"
        cp ${SHARE}${GRESOURCE} $GRESOURCE
        printf "Unpacking binary resource..."
        for r in `gresource list ${SHARE}${GRESOURCE}`; do
                r=${r#\/org\/gnome\/shell/}
                if [ ! -d $WORKDIR/${r%/*} ]; then
                        mkdir -p $WORKDIR/${r%/*}
                fi
        done

        for r in `gresource list ${SHARE}${GRESOURCE}`; do
                printf "."
                gresource extract ${SHARE}${GRESOURCE} $r >$WORKDIR/${r#\/org\/gnome\/shell/}
        done
        echo

        echo "creating ${XMLRES}..."

        cat <<EOT > ${XMLRES}
<?xml version="1.0" encoding="UTF-8"?>
<gresources>
<gresource prefix="/org/gnome/shell/theme">
<file>calendar-today.svg</file>
<file>checkbox-focused.svg</file>
<file>checkbox-off-focused.svg</file>
<file>checkbox-off.svg</file>
<file>checkbox.svg</file>
<file>workspace-placeholder.svg</file>
<file>gnome-shell.css</file>
<file>gnome-shell-high-contrast.css</file>
<file>icons/scalable/status/eye-not-looking-symbolic.svg</file>
<file>icons/scalable/status/eye-open-negative-filled-symbolic.svg</file>
<file>icons/scalable/status/message-indicator-symbolic.svg</file>
<file>icons/scalable/status/keyboard-enter-symbolic.svg</file>
<file>icons/scalable/status/keyboard-hide-symbolic.svg</file>
<file>icons/scalable/status/keyboard-layout-filled-symbolic.svg</file>
<file>icons/scalable/status/keyboard-shift-filled-symbolic.svg</file>
<file>icons/scalable/status/keyboard-caps-lock-filled-symbolic.svg</file>
<file>icons/scalable/actions/color-pick.svg</file>
<file>icons/scalable/actions/pointer-double-click-symbolic.svg</file>
<file>icons/scalable/actions/pointer-drag-symbolic.svg</file>
<file>icons/scalable/actions/pointer-primary-click-symbolic.svg</file>
<file>icons/scalable/actions/pointer-secondary-click-symbolic.svg</file>
<file>no-events.svg</file>
<file>no-notifications.svg</file>
<file>pad-osd.css</file>
<file>process-working.svg</file>
<file>toggle-off-dark.svg</file>
<file>toggle-off-hc.svg</file>
<file>toggle-off.svg</file>
<file>toggle-on-dark.svg</file>
<file>toggle-on-hc.svg</file>
<file>toggle-on.svg</file>
<file>${PIC}</file>
</gresource>
</gresources>
EOT

        WORKDIR="${WORKDIR}/theme/"

        if [ -f $CSS ]; then
                echo Backing up $CSS...
                cp $CSS "backups/${CSS}.bak.${DATE}"
                sed -i 's/#lockDialogGroup/#lockDialogGroup-old/' $CSS
                printf "#lockDialogGroup {\n    background: #2e3436 url(${PIC});\n    background-repeat: no-repeat;\n    background-size: cover; }\n" >> $CSS

                # change blue accent colour to nice pink
                sed -i 's/#1b6acb/#f981b6/g' $CSS
                sed -i 's/#1c6fd4/#f56898/g' $CSS
                sed -i 's/#629fea/#f56898/g' $CSS
                sed -i 's/rgba(188, 214, 246, 0.3)/rgba(249, 129, 182, 0.3)/g' $CSS
        else
                echo Error: could not find file $CSS
                exit 1
        fi

        echo 'Edit any file now before installation then hit ENTER to continue...'
        read

        echo Compiling binary resources...
        glib-compile-resources $XMLRES
        echo Copying binary resources over to ${SHARE}...
        sudo cp $GRESOURCE "${SHARE}${GRESOURCE}"
        sudo cp $CSS "${SHARE}${CSS}"

        busctl --user call org.gnome.Shell /org/gnome/Shell org.gnome.Shell Eval s 'Meta.restart("Restarting…")'
}

install_spotify(){
        echo "Installing Spotify..."
        curl -sS https://download.spotify.com/debian/pubkey_0D811D58.gpg | gpg --import -
        yay -S spotify
}

install_profile-sync-daemon(){
        sudo pacman -S profile-sync-daemon
        psd
        sed -i 's/^#BROWSERS=.*$/BROWSERS=(google-chrome firefox)/' $HOME/.config/psd/psd.conf
        sed -i 's/^#USE_OVERLAYFS=.*$/USE_OVERLAYFS="yes"/' $HOME/.config/psd/psd.conf
        echo "$USER ALL=(ALL) NOPASSWD: /usr/bin/psd-overlay-helper" | sudo tee -a /etc/sudoers
        systemctl --user enable --now psd.service

        # asd config
        sudo sed -i "s/^WHATTOSYNC=.*$/WHATTOSYNC=('\/home\/paul\/.cache')/" /etc/asd.conf
        sudo sed -i 's/^#USE_OVERLAYFS=.*$/USE_OVERLAYFS="yes"/' /etc/asd.conf
        sudo sed -i 's/^#VOLATILE=.*$/VOLATILE="/dev/shm")/' /etc/asd.conf
        sudo systemctl enable --now asd
}

install_apps(){
        clear

        echo "Installing Chrome, VS Code, WPS Office, Gimp..."
        yay -S google-chrome code onlyoffice-bin gimp vlc kodi dropbox handbrake rpi-imager-bin

        install_spotify
        #install_profile-sync-daemon
}

install_qemu(){
        clear

        echo "Installing QEMU/KVM"
        sudo pacman -S libvirt virt-manager edk2-ovmf qemu iptables-nft dnsmasq dmidecode swtpm

        # Enable Virtualization Technology for Directed I/O in rEFInd config as boot param
        # module_blacklist=xpad                                 - allows XBOX controller to be passed through to VM
        # default_hugepagesz=1G hugepagesz=1G hugepages=8       - pre-allocates 8GB RAM for VM using 1GB Hugepages
        sudo sed -i.bak 's/linux-zen.img[^"]*/& intel_iommu=on iommu=pt video=efifb:off pci=realloc module_blacklist=xpad default_hugepagesz=1G hugepagesz=1G hugepages=8/' /boot/refind_linux.conf

        sudo sed -i 's/^MODULES=.*$/MODULES=(vfio_pci vfio vfio_iommu_type1 vfio_virqfd)/' /etc/mkinitcpio.conf
        sudo mkinitcpio -P

        sudo usermod -a -G libvirt $USER

        sudo bash -c 'sudo cat <<EOT >> /etc/libvirt/qemu.conf
nvram = [
	"/usr/share/edk2-ovmf/x64/OVMF_CODE.fd:/usr/share/edk2-ovmf/x64/OVMF_VARS.fd"
]
EOT'

        sudo bash -c 'sudo cat <<EOT >> /etc/modprobe.d/vfio.conf
softdep nouveau pre: vfio-pci
softdep snd_hda_intel pre: vfio-pci
options vfio-pci ids=10de:1b80,10de:10f0
EOT'

        sudo bash -c 'sudo cat <<EOT >> /etc/modprobe.d/kvm.conf
options kvm ignore_msrs=Y
options kvm report_ignored_msrs=N
EOT
'
        sudo systemctl enable --now libvirtd.service
        sudo systemctl enable --now virtlogd.socket
        sudo virsh net-autostart default
        sudo virsh net-start default

        # WINDOWS 11 Bypass
        # =================
        # TPM 
        # swtpm socket --tpmstate dir=/tmp/emulated_tpm --ctrl type=unixio,path=/tmp/emulated_tpm/swtpm-sock --log level=20 --tpm2
        # Pass through a TMP device as emulated TIS
        #
        # Secure boot
        # Use the /usr/share/edk2-ovmf/x64/OVMF_CODE.secboot.fd
        #
        # Regedit hack (for upgrading from Windows 10 ONLY)
        # HKEY_LOCAL_MACHINE\SYSTEM\Setup\MoSetup > New > DWORD (32-bit) Value. Name the value “AllowUpgradesWithUnsupportedTPMOrCPU" set it to 1
}

install_dev(){
        clear

        echo "Installing Development tools... IntelliJ, Java, gradle"
        sudo pacman -S jre11-openjdk jdk11-openjdk gradle intellij-idea-community-edition
        yay -S postman-bin
}

checkprogress(){
        i="0"
        while (true)
        do
            proc=$(ps aux | grep -v grep | grep -e $1)
            if [[ "$proc" == "" ]]; then break; fi
            sleep 0.5
            echo $i
            i=$(expr $i + 1)
        done
        # If it is done then display 100%
        echo 100
        # Give it some time to display the progress to the user.
        sleep 2
}

updatemirrors(){
        curl -sL "$MIRRORLIST_URL" | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 5 - > /etc/pacman.d/mirrorlist &
        {
            checkprogress "rankmirrors"

        } | whiptail --gauge --title "$BACKTITLE" "Ranking Mirrors..." 8 78 0
}

install_yay(){
        git clone https://aur.archlinux.org/yay.git $HOME/yay
        cd $HOME/yay
        makepkg -si
        cd ..
}

# --------------------------------------------------------

[[ ! -d $HOME/yay ]] && install_yay

# optimise yay when building packages
sudo sed -i 's/^#MAKEFLAGS="-j2"/MAKEFLAGS="-j$(nproc)"/' /etc/makepkg.conf
sudo sed -i "s/^PKGEXT=.*$/PKGEXT='.pkg.tar'/" /etc/makepkg.conf

# git credentials
git config --global credential.helper store
git config --global user.email "pr.stephens@gmail.com"
git config --global user.name "prstephens"

mainmenu