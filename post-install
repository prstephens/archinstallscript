#! /bin/bash

# Arch Linux Post Install Script 
# ------------------------------
# author    : prstephens
#             https://github.com/prstephens           
# project   : https://github.com/prstephens/archinstallscript
# license   : LGPL-3.0 (http://opensource.org/licenses/lgpl-3.0.html)
# referance : https://wiki.archlinux.org/index.php/Installation_guide

VERSION="2"
BACKTITLE="Arch Installer v"$VERSION
BASE_URL="https://raw.githubusercontent.com/prstephens/archinstallscript/master/"

rootdev=/root/dev # changed on the fly during install
USE_CRYPT=0 # changed on the fly during install
USE_RAID=0 # changed on the fly during install

set -o pipefail
#set -x #toggle for debug. Will print all commands.

# --------------------------------------------------------

mainmenu(){
        if [ "${1}" = "" ]; then
            nextitem="."
        else
            nextitem=${1}
        fi
        options=()
        options+=("GNOME" "Gnome vanilla install")
        options+=("GNOME MAC OS" "Install Gnome with Mac OS theme")
        options+=("GNOME POP!_OS" "Install Gnome with the Pop!_OS Pop Shell and configurations")
        options+=("1.2)" "Themes")
        options+=("2)" "Install Xanmod-tt Kernel")
        options+=("3)" "Applications")
        options+=("3.1)" "Nord VPN")
        options+=("4)" "QEMU/KVM")
        options+=("5)" "Java Development Environment")

        sel=$(whiptail --backtitle "${BACKTITLE}" --fb --title "Arch Linux Post Installer" --menu "" --cancel-button "Exit" --default-item "${nextitem}" 20 78 0 \
            "${options[@]}" \
            3>&1 1>&2 2>&3)
        if [ "$?" = "0" ]; then
            case ${sel} in
                "GNOME")
                    install_gnome
                    nextitem="1.2)"
                ;;
                "GNOME MAC OS")
                    install_gnome_mac
                    nextitem="1.2)"
                ;;
                "GNOME POP!_OS")
                    install_popshell
                    nextitem="1.2)"
                ;;
                "1.2)")
                    install_themes
                    nextitem="2)"
                ;;
                "2)")
                    install_xanmod
                    nextitem="3)"
                ;;
                "3)")
                    install_apps
                    nextitem="4)"
                ;;
                "3.1)")
                    install_nordvpn
                    nextitem="4)"
                ;;
                "4)")
                    install_qemu
                    nextitem="5)"
                ;;
                "5)")
                    install_dev
                    nextitem="5)"
                ;;
            esac
            mainmenu "${nextitem}"
        else
            clear
        fi
}

install_fonts(){
        echo "Installing fonts..."
        yay -S apple-fonts nerd-fonts-cascadia-code

        [[ ! -d $HOME/.local/share/fonts ]] && mkdir $HOME/.local/share/fonts
        curl -sL $BASE_URL/fonts/HelveticaNeueLt.ttf -o $HOME/.local/share/fonts/HelveticaNeueLt.ttf

        echo "Windows fonts..."
        curl -sL $BASE_URL/fonts/windows/windowsfonts.tar.gz.partaa -o /tmp/windowsfonts.tar.gz.partaa
        curl -sL $BASE_URL/fonts/windows/windowsfonts.tar.gz.partab -o /tmp/windowsfonts.tar.gz.partab
        curl -sL $BASE_URL/fonts/windows/windowsfonts.tar.gz.partac -o /tmp/windowsfonts.tar.gz.partac

        cat /tmp/windowsfonts.tar.gz.parta* > /tmp/windowsfonts.tar.gz

        sudo tar -zxvf /tmp/windowsfonts.tar.gz -C /

        fc-cache -f
}

install_themes(){
        install_whitesur
        install_catppuccin
        install_orchis
}

install_gnome(){
        clear
        
        echo "Installing Gnome.."
        sudo pacman -S gnome gnome-tweaks xscreensaver firefox sassc seahorse gparted grub-customizer wmctrl flatpak code rxvt-unicode cool-retro-term
        yay -S pamac-aur snapper-gui-git rar cava extension-manager
        
        install_fonts

        # xscreensaver settings - 10 min timeout - GL matrix 
        curl -sL $BASE_URL/configs/.xscreensaver -o $HOME/.xscreensaver
        if [ ! -d $HOME/.config/autostart/ ];then mkdir $HOME/.config/autostart;fi
        curl -sL $BASE_URL/configs/xscreensaver.desktop -o $HOME/.config/autostart/xscreensaver.desktop

        # set some nice defaults
        xdg-mime default nemo.desktop inode/directory application/x-gnome-saved-search
        gsettings set org.cinnamon.desktop.default-applications.terminal exec urxvt
        gsettings set org.cinnamon.desktop.default-applications.terminal exec-arg -e

        # add arch updater extension
        yay -S gnome-shell-extension-arch-update
        gsettings set org.gnome.shell.extensions.arch-update check-cmd "/bin/sh -c \"(/usr/bin/checkupdates; /usr/bin/yay -Qqu --color never | sed 's/Get .*//') | sort -u -t' ' -k1,1\""
        gsettings set org.gnome.shell.extensions.arch-update update-cmd 'cool-retro-term -e sh -c "wmctrl -r :ACTIVE: -b toggle,fullscreen;yay -Syu ; echo Done - Press enter to exit; read"'
        gsettings set org.gnome.shell.extensions.arch-update package-manager 'pamac-manager'
        gsettings set org.gnome.shell.extensions.arch-update use-buildin-icons true

        gsettings set org.gnome.shell disable-extension-version-validation "true"

        # Turn on some extensions
        gnome-extensions enable user-theme@gnome-shell-extensions.gcampax.github.com
        gnome-extensions enable arch-update@RaphaelRochet
        
        # Remove some trash from Gnome
        sudo pacman -Rs epiphany gnome-music cheese totem

        ##fildem fix
        #sudo ln -s /usr/lib/python3.9/site-packages/fildem /usr/lib/python3.10/site-packages 
        #sudo ln -s /usr/lib/python3.9/site-packages/fildem-0.6.7-py3.9.egg-info/ /usr/lib/python3.10/site-packages

        # Install Gradience - to change LibAdwaita colours
        #flatpak install flathub com.github.GradienceTeam.Gradience

        # coolero
        #sudo systemd-sysusers
        #sudo usermod -aG coolero $USER
        #sudo systemctl enable coolerod.service

	sudo systemctl enable gdm

        # create a snapshot
        for i in `seq 2 50`; do sudo snapper delete $i; done;
        sudo snapper -c root create --description "### FRESH INSTALL - Including Gnome ###" # ID 2
        sudo grub-mkconfig -o /boot/grub/grub.cfg

        whiptail --backtitle "$BACKTITLE" --msgbox --title "Gnome Installed" "Its best to reboot now before carrying on with the install" 0 78
}

install_gnome_mac(){
        install_gnome

        gsettings set org.gnome.desktop.input-sources sources "[('xkb', 'gb')]"

        # Remove 'Utilities' folder in app grid so all apps are in view
        gsettings set org.gnome.desktop.app-folders folder-children "['YaST']"

        # add dash to dock extension - use ubuntu-dock branch. better compatiibility with blur my shell
        # yay -S gnome-shell-extension-dash-to-dock
        git clone https://github.com/prstephens/dash-to-dock-ventura.git /tmp/ubuntu-dock
        cd /tmp/ubuntu-dock
        make
        make install
        cd

        gnome-extensions enable ubuntu-dock@ubuntu.com

        # install the Mac theme set
        install_whitesur
        apply_whitesur

        whiptail --backtitle "$BACKTITLE" --msgbox --title "Gnome Mac OS Installed" "Its best to logout or reboot now" 0 78
}

install_whitesur(){
        [[ ! -d $HOME/.local/share/backgrounds ]] && mkdir $HOME/.local/share/backgrounds

        curl -sL $BASE_URL/wallpaper/macos/ventura-light.jpg -o $HOME/.local/share/backgrounds/ventura-light.jpg
        curl -sL $BASE_URL/wallpaper/macos/ventura-dark.jpg -o $HOME/.local/share/backgrounds/ventura-dark.jpg

        curl -sL $BASE_URL/wallpaper/macos/monterey-light.jpg -o $HOME/.local/share/backgrounds/monterey-light.jpg
        curl -sL $BASE_URL/wallpaper/macos/monterey-dark.jpg -o $HOME/.local/share/backgrounds/monterey-dark.jpg

        curl -sL $BASE_URL/wallpaper/macos/bigsur-light.jpg -o $HOME/.local/share/backgrounds/bigsur-light.jpg
        curl -sL $BASE_URL/wallpaper/macos/bigsur-dark.jpg -o $HOME/.local/share/backgrounds/bigsur-dark.jpg

        git clone https://github.com/prstephens/WhiteSur-gtk-theme.git /tmp/WhiteSur-gtk-theme
        cd /tmp/WhiteSur-gtk-theme
        ./install.sh -m -o normal -N glassy -c Light -s 280 -l -c Light
        ./tweaks.sh -d -c Light
        ./tweaks.sh -f monterey
        ./tweaks.sh -F
        sudo flatpak override --filesystem=xdg-config/gtk-4.0
        sudo ./tweaks.sh -g -c Light -b $HOME/.local/share/backgrounds/ventura-light.jpg
        cd ..

        git clone https://github.com/prstephens/WhiteSur-icon-theme.git /tmp/WhiteSur-icon-theme
        /tmp/WhiteSur-icon-theme/install.sh --black

        git clone https://github.com/prstephens/WhiteSur-cursors.git /tmp/WhiteSur-cursors
        cd /tmp/WhiteSur-cursors
        ./install.sh
        cd

        # change some icons to a better mac version
        cp -R /tmp/WhiteSur-icon-theme/original/*.svg $HOME/.local/share/icons/WhiteSur/apps/scalable/

        # MacOS calendar icon fix
        git clone https://github.com/prstephens/mac-dynamic-calendar.git /tmp/mac-dynamic-calendar
        cp -R /tmp/mac-dynamic-calendar/mac-dynamic-calendar\@prstephens.github.com $HOME/.local/share/gnome-shell/extensions/
        gnome-extensions enable mac-dynamic-calendar@prstephens.github.com

        # Gnome Extensions
        # ==================================================================================
        #
        # Alpabetical App Grid
        # Favourites in AppGrid
        # Blur my Shell
        # clipboard indicator
        # Compiz alike magic lamp effect
        # Desktop Icons NG (DING)
        # Espresso
        # Fildem
        # Gnome 4x UI Improvements
        # Hibernate status button
        # Just perfection
        # Logo menu
        # Panel corners
        # Rounded window corners
        # Search Light
        # Sur clock
        # Tray icons reloaded
        # Unite
}

apply_whitesur(){
        gsettings set org.gnome.desktop.interface gtk-theme WhiteSur-Light
        gsettings set org.gnome.desktop.interface icon-theme WhiteSur
        gsettings set org.gnome.desktop.interface cursor-theme WhiteSur-cursors
        gsettings set org.gnome.shell.extensions.user-theme name WhiteSur-Light

        gsettings set org.gnome.desktop.interface font-name "SF Pro Rounded Regular 11"
        gsettings set org.gnome.desktop.interface document-font-name "SF Pro Rounded Regular 11"
        gsettings set org.gnome.desktop.interface monospace-font-name "Source Code Pro 9"
        gsettings set org.gnome.desktop.wm.preferences titlebar-font "SF Pro Rounded Regular 11"

        gsettings set org.gnome.desktop.wm.preferences button-layout "close,minimize,maximize:"

        gsettings set org.gnome.desktop.background picture-uri file:////$HOME/.local/share/backgrounds/ventura-light.jpg
}

install_popshell(){
        install_gnome

        # dependancies
        yay -S typescript ninja meson pop-fonts
        fc-cache -f

        # GTK Theme
        git clone https://github.com/pop-os/gtk-theme.git /tmp/gtk-theme
        cd /tmp/gtk-theme
        meson build && cd build
        ninja
        ninja install

        # Icon theme
        git clone https://github.com/pop-os/icon-theme /tmp/pop-icon-theme
        cd /tmp/pop-icon-theme
        meson build
        sudo ninja -C "build" install

        # pop shell cosmic dock
        https://github.com/pop-os/cosmic-dock.git /tmp/cosmic-dock
        cd /tmp/cosmic-dock
        make
        make install

        # cosmic workspaces
        git clone https://github.com/pop-os/cosmic-workspaces.git /tmp/cosmic-workspaces
        cd /tmp/cosmic-workspaces
        make
        make install

        # desktop widgets
        https://github.com/pop-os/desktop-widget.git /tmp/desktop-widget
        cd /tmp/desktop-widget
        make install

        # COSMIC
        git clone https://github.com/pop-os/cosmic /tmp/cosmic
        cd /tmp/cosmic
        make && make install

        apply_pop

        # Pop shell extension
        yay -S gnome-shell-extension-pop-shell-git
        git clone https://github.com/pop-os/shell.git /tmp/shell
        cd /tmp/shell
        make local-install    

        whiptail --backtitle "$BACKTITLE" --msgbox --title "Gnome Pop!_OS Installed" "Its best to logout or reboot now" 0 78
}

apply_pop(){
        gsettings set org.gnome.desktop.interface gtk-theme Pop-dark
        gsettings set org.gnome.desktop.interface icon-theme Pop
        gsettings set org.gnome.desktop.interface cursor-theme Pop
        gsettings set org.gnome.shell.extensions.user-theme name Pop

        gsettings set org.gnome.desktop.interface font-name "Fira Sans Book 10"
        gsettings set org.gnome.desktop.interface document-font-name "Roboto Slab Regular 11"
        gsettings set org.gnome.desktop.interface monospace-font-name "Fira Mono Regular 11"
        gsettings set org.gnome.desktop.wm.preferences titlebar-font "Fira Sans SemiBold 10"

        gsettings set org.gnome.desktop.wm.preferences button-layout ":minimize,close"
}

install_catppuccin(){
        yay -S catppuccin-gtk-theme-macchiato

        # code theme
        git clone https://github.com/catppuccin/vscode.git $HOME/.vscode-oss/extensions/catppuccin-vsc

        # Fluent icon theme - goes nice with catppuccin
        git clone https://github.com/prstephens/Fluent-icon-theme.git /tmp/Fluent-icon-theme
        /tmp/Fluent-icon-theme/install.sh --all -r
}

install_orchis(){
        git clone https://github.com/prstephens/Orchis-theme.git /tmp/Orchis-theme
        /tmp/Orchis-theme/install.sh -d $HOME/.themes -t pink -c dark
        
        git clone https://github.com/prstephens/Tela-icon-theme.git /tmp/Tela-icon-theme
        /tmp/Tela-icon-theme/install.sh -d $HOME/.icons pink
}

install_xanmod(){
        clear
        # _microarchitecture=98 - Native Intel CPU
        env _microarchitecture=98 yay -S linux-xanmod-tt linux-xanmod-tt-headers
}

install_spotify(){
        echo "Installing Spotify..."
        curl -sS https://download.spotify.com/debian/pubkey_5E3C45D7B312C643.gpg | gpg --import -
        yay -S spotify
}

install_profile-sync-daemon(){
        sudo pacman -S profile-sync-daemon
        psd
        sed -i 's/^#BROWSERS=.*$/BROWSERS=(google-chrome firefox)/' $HOME/.config/psd/psd.conf
        sed -i 's/^#USE_OVERLAYFS=.*$/USE_OVERLAYFS="yes"/' $HOME/.config/psd/psd.conf
        echo "$USER ALL=(ALL) NOPASSWD: /usr/bin/psd-overlay-helper" | sudo tee -a /etc/sudoers
        systemctl --user enable --now psd.service  
}

install_anything-sync-daemon(){
        sudo pacman -S anything-sync-daemon
        sudo sed -i "s/^WHATTOSYNC=.*$/WHATTOSYNC=('\/home\/paul\/.cache')/" /etc/asd.conf
        sudo sed -i 's/^#USE_OVERLAYFS=.*$/USE_OVERLAYFS="yes"/' /etc/asd.conf
        sudo sed -i 's/^#VOLATILE=.*$/VOLATILE="\/dev\/shm")/' /etc/asd.conf
        sudo systemctl enable --now asd
}

install_apps(){
        clear

        echo "Installing Chrome, VS Code, OnlyOffice, Gimp..."
        yay -S google-chrome onlyoffice-bin gimp vlc kodi dropbox handbrake rpi-imager-bin geary ventoy-bin etcher-bin

        install_spotify
}

install_nordvpn(){
        yay -S nordvpn-bin
        sudo groupadd -r nordvpn
        sudo gpasswd -a $USER nordvpn
        sudo systemctl enable --now nordvpnd.service
        nordvpn set protocol tcp
        nordvpn set technology nordlynx
        sudo nordvpn whitelist add subnet 192.168.1.0/24
        nordvpn set autoconnect on uk

        whiptail --backtitle "$BACKTITLE" --msgbox --title "Information" "To log into Nord VPN, run 'nordvpn login' and follow the instructions" 0 78
}

install_qemu(){
        clear

        echo "Installing QEMU/KVM"
        sudo pacman -S libvirt virt-manager edk2-ovmf qemu iptables-nft dnsmasq dmidecode swtpm

        # Enable Virtualization Technology for Directed I/O in grub config as boot param
        # default_hugepagesz=1G hugepagesz=1G                   - pre-allocates RAM for VM using 1GB Hugepages
        sudo sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT=.*$/GRUB_CMDLINE_LINUX_DEFAULT="quiet loglevel=3 rd.systemd.show_status=false nowatchdog mitigations=off intel_iommu=on iommu=pt video=efifb:off pci=realloc default_hugepagesz=1G hugepagesz=1G"/' /etc/default/grub
        sudo sed -i 's/^MODULES=.*$/MODULES=(i915 btrfs vfio_pci vfio vfio_iommu_type1 vfio_virqfd)/' /etc/mkinitcpio.conf
        sudo mkinitcpio -P
        sudo grub-mkconfig -o /boot/grub/grub.cfg

        sudo usermod -a -G libvirt $USER

        sudo bash -c 'sudo cat <<EOT >> /etc/libvirt/qemu.conf
nvram = [
	"/usr/share/edk2-ovmf/x64/OVMF_CODE.fd:/usr/share/edk2-ovmf/x64/OVMF_VARS.fd"
]
EOT'

        sudo bash -c 'sudo cat <<EOT >> /etc/modprobe.d/vfio.conf
softdep nouveau pre: vfio-pci
softdep snd_hda_intel pre: vfio-pci
options vfio-pci ids=10de:1b80,10de:10f0
EOT'

        sudo bash -c 'sudo cat <<EOT >> /etc/modprobe.d/kvm.conf
options kvm ignore_msrs=Y
options kvm report_ignored_msrs=N
EOT
'
        sudo systemctl enable --now libvirtd.service
        sudo systemctl enable --now virtlogd.socket
        sudo virsh net-autostart default
        sudo virsh net-start default

        # WINDOWS 11 Bypass
        # =================
        #
        # mkdir /tmp/emulated_tpm
        # swtpm socket --tpmstate dir=/tmp/emulated_tpm --ctrl type=unixio,path=/tmp/emulated_tpm/swtpm-sock --log level=20 --tpm2
        # Pass through a TMP device as emulated TIS
        #
        # Secure boot
        # Use the /usr/share/edk2-ovmf/x64/OVMF_CODE.secboot.fd
        #
        # Regedit hack (for upgrading from Windows 10 ONLY)
        # HKEY_LOCAL_MACHINE\SYSTEM\Setup\MoSetup > New > DWORD (32-bit) Value. Name the value “AllowUpgradesWithUnsupportedTPMOrCPU" set it to 1
}

install_dev(){
        clear

        echo "Installing Development tools... IntelliJ, Java, gradle"
        sudo pacman -S jre11-openjdk jdk11-openjdk gradle intellij-idea-community-edition
        yay -S postman-bin
}

initialise(){
        whiptail --backtitle "$BACKTITLE" --msgbox --title "Welcome!" "Welcome to Arch Linux\n\nWe will now initialise the system" 0 78

        # optimise yay when building packages
        sudo sed -i 's/^#MAKEFLAGS="-j2"/MAKEFLAGS="-j$(nproc)"/' /etc/makepkg.conf
        sudo sed -i "s/^PKGEXT=.*$/PKGEXT='.pkg.tar'/" /etc/makepkg.conf

        sudo sed -i 's/^CFLAGS.*/CFLAGS="-march=native -mtune=native -O2 -pipe -fstack-protector-strong --param=ssp-buffer-size=4 -fno-plt"/' /etc/makepkg.conf
        sudo sed -i '/CFLAGS/{n;N;d}' /etc/makepkg.conf
        
        sudo sed -i 's/^#RUSTFLAGS.*/RUSTFLAGS="-C opt-level=2 -C target-cpu=native"/' /etc/makepkg.conf
        sudo sed -i 's/^#BUILDDIR.*/BUILDDIR=\/tmp\/makepkg/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSGZ.*/COMPRESSGZ=(pigz -c -f -n)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSBZ2.*/COMPRESSBZ2=(pbzip2 -c -f)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSXZ.*/COMPRESSXZ=(xz -T "$(getconf _NPROCESSORS_ONLN)" -c -z --best -)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSZST.*/COMPRESSZST=(zstd -c -z -q --ultra -T0 -22 -)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSLZ.*/COMPRESSLZ=(lzip -c -f)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSLRZ.*/COMPRESSLRZ=(lrzip -9 -q)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSLZO.*/COMPRESSLZO=(lzop -q --best)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSZ.*/COMPRESSZ=(compress -c -f)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSLZ4.*/COMPRESSLZ4=(lz4 -q --best)/' /etc/makepkg.conf

        # install yay
        git clone https://aur.archlinux.org/yay.git $HOME/yay
        cd $HOME/yay
        makepkg -si
        cd ..

        # remove annoying yay questions
        yay --save --answerdiff None --answerclean None --removemake 

        # snapper config
        sudo umount /.snapshots
        sudo rm -r /.snapshots
        sudo snapper -c root create-config /
        sudo btrfs subvolume delete /.snapshots
        sudo mkdir /.snapshots
        sudo mount -a
        sudo chmod 750 /.snapshots
        sudo chmod a+rx /.snapshots
        sudo chown :$USER /.snapshots

        sudo sed -i "s|^ALLOW_USERS=.*$|ALLOW_USERS=\"$USER\"|" /etc/snapper/configs/root
        sudo sed -i 's/^TIMELINE_LIMIT_HOURLY=.*$/TIMELINE_LIMIT_HOURLY="5"/' /etc/snapper/configs/root
        sudo sed -i 's/^TIMELINE_LIMIT_DAILY=.*$/TIMELINE_LIMIT_DAILY="7"/' /etc/snapper/configs/root
        sudo sed -i 's/^TIMELINE_LIMIT_WEEKLY=.*$/TIMELINE_LIMIT_WEEKLY="0"/' /etc/snapper/configs/root
        sudo sed -i 's/^TIMELINE_LIMIT_MONTHLY=.*$/TIMELINE_LIMIT_MONTHLY="0"/' /etc/snapper/configs/root
        sudo sed -i 's/^TIMELINE_LIMIT_YEARLY=.*$/TIMELINE_LIMIT_YEARLY="0"/' /etc/snapper/configs/root

        sudo systemctl enable --now snapper-timeline.timer
        sudo systemctl enable --now snapper-cleanup.timer
        sudo systemctl enable --now btrfs-scrub@-.timer

        yay -S snap-pac-grub snapper-rollback snp

        # config for booting a snapshot in read only
        sudo cp /lib/initcpio/hooks/grub-btrfs-overlayfs /etc/initcpio/hooks
        sudo cp /lib/initcpio/install/grub-btrfs-overlayfs /etc/initcpio/install

        if [[ "$USE_RAID" -eq 1 ]]
        then
                sudo sed -i 's/^HOOKS=.*$/HOOKS=(base udev autodetect keyboard keymap consolefont modconf block mdadm_udev filesystems resume fsck grub-btrfs-overlayfs)/' /etc/mkinitcpio.conf

                if [[ "$USE_CRYPT" -eq 1 ]]
                then
                        sudo sed -i 's/^HOOKS=.*$/HOOKS=(base udev autodetect keyboard keymap consolefont modconf block mdadm_udev encrypt-dh lvm2 filesystems resume fsck grub-btrfs-overlayfs)/' /etc/mkinitcpio.conf
                fi
        else
                if [[ "$USE_CRYPT" -eq 1 ]]
                then
                        sudo sed -i 's/^HOOKS=.*$/HOOKS=(base udev autodetect keyboard keymap consolefont modconf block encrypt-dh lvm2 filesystems resume fsck grub-btrfs-overlayfs)/' /etc/mkinitcpio.conf
                else
                        sudo sed -i 's/^HOOKS=.*$/HOOKS=(base udev autodetect keyboard keymap consolefont modconf block filesystems resume fsck grub-btrfs-overlayfs)/' /etc/mkinitcpio.conf
                fi
        fi

        sudo mkinitcpio -P

        # put root dev into snapper-rollback.conf
        echo "dev=${rootdev}" | sudo tee -a /etc/snapper-rollback.conf

        # git credentials
        git config --global credential.helper store
        git config --global user.email "pr.stephens@gmail.com"
        git config --global user.name "prstephens"

        # create a snapshot
        for i in `seq 1 50`; do sudo snapper delete $i; done;
        sudo snapper -c root create --description "### FRESH INSTALL - Base ###" #ID 1
        sudo grub-mkconfig -o /boot/grub/grub.cfg

        if [[ "$USE_CRYPT" -eq 1 ]]
        then
                sudo mkdir /.bootbackup
                cat <<EOT | sudo tee -a /usr/bin/boot-backup
#!/bin/bash
/usr/bin/rsync -a --delete /boot /.bootbackup/\$(ls -1v /.snapshots | tail -n 1)
EOT
                sudo chmod +x /usr/bin/boot-backup
                sudo mkdir /etc/pacman.d/hooks
                cat <<EOT | sudo tee -a /etc/pacman.d/hooks/95-bootbackup.hook
[Trigger]
Operation = Upgrade
Operation = Install
Operation = Remove
Type = Path
Target = usr/lib/modules/*/vmlinuz

[Action]
Depends = rsync
Description = Backing up /boot...
When = PostTransaction
Exec = /usr/bin/boot-backup
EOT

        # Run the boot backup for first time so we have a copy of a working kernel 
        sudo /usr/bin/boot-backup
        
        fi      
}

self_update(){
        curl -sL $BASE_URL/version -o /tmp/version
        value=$(</tmp/version)
        if (("$VERSION" < "$value")); then
                curl -sL $BASE_URL/post-install -o $HOME/post-install
                chmod +x $HOME/post-install
                exec $HOME/post-install
                exit 1
        fi
}

# --------------------------------------------------------

self_update

[[ ! -d $HOME/yay ]] && initialise

mainmenu
