#! /bin/bash

# Arch Linux Post Install Script 
# ------------------------------
# author    : prstephens
#             https://github.com/prstephens           
# project   : https://github.com/prstephens/archinstallscript
# license   : LGPL-3.0 (http://opensource.org/licenses/lgpl-3.0.html)
# referance : https://wiki.archlinux.org/index.php/Installation_guide

BACKTITLE="Arch Installer v3"
BASE_URL="https://raw.githubusercontent.com/prstephens/archinstallscript/master/"

set -o pipefail
#set -x #toggle for debug. Will print all commands.

# --------------------------------------------------------

mainmenu(){
        if [ "${1}" = "" ]; then
            nextitem="."
        else
            nextitem=${1}
        fi
        options=()
        options+=("1)" "Plasma DE")
        options+=("2)" "Gnome DE")
        options+=("3)" "Install Xanmod-tt Kernel")
        options+=("4)" "Applications")
        options+=("5)" "QEMU/KVM")
        options+=("6)" "Java Development Environment")

        sel=$(whiptail --backtitle "${BACKTITLE}" --fb --title "Arch Linux Post Installer" --menu "" --cancel-button "Exit" --default-item "${nextitem}" 0 0 0 \
            "${options[@]}" \
            3>&1 1>&2 2>&3)
        if [ "$?" = "0" ]; then
            case ${sel} in
                "1)")
                    install_plasma
                    nextitem="2)"
                ;;
                "2)")
                    install_gnome
                    nextitem="3)"
                ;;
                "3)")
                    install_xanmod
                    nextitem="4)"
                ;;
                "4)")
                    install_apps
                    nextitem="5)"
                ;;
                "5)")
                    install_qemu
                    nextitem="6)"
                ;;
                "6)")
                    install_dev
                    nextitem="6)"
                ;;
            esac
            mainmenu "${nextitem}"
        else
            clear
        fi
}

install_fonts(){
        echo "Installing fonts..."
        yay -S apple-fonts nerd-fonts-cascadia-code
        
        echo "Windows fonts..."

        curl -sL $BASE_URL/fonts/windows/windowsfonts.tar.gz.partaa -o /tmp/windowsfonts.tar.gz.partaa
        curl -sL $BASE_URL/fonts/windows/windowsfonts.tar.gz.partab -o /tmp/windowsfonts.tar.gz.partab
        curl -sL $BASE_URL/fonts/windows/windowsfonts.tar.gz.partac -o /tmp/windowsfonts.tar.gz.partac

        cat /tmp/windowsfonts.tar.gz.parta* > /tmp/windowsfonts.tar.gz

        sudo tar -zxvf /tmp/windowsfonts.tar.gz -C /

        fc-cache -f
}

install_plasma(){    
        clear
        
        echo "Installing Plasma.."
        sudo pacman -S plasma-meta ark dolphin xscreensaver konsole sshfs kvantum-qt5
        yay -S latte-dock plasma5-applets-kde-arch-update-notifier

        # xscreensaver settings - 10 min timeout - GL matrix 
        curl -sL $BASE_URL/sweet/.xscreensaver -o $HOME/.xscreensaver
        if [ ! -d $HOME/.config/autostart/ ];then mkdir $HOME/.config/autostart;fi
        curl -sL $BASE_URL/sweet/xscreensaver.desktop -o $HOME/.config/autostart/xscreensaver.desktop

        # Dracula colour scheme for Konsole
        curl -sL $BASE_URL/sweet/Dracula.colorscheme -o $HOME/.local/konsole/Dracula.colorscheme

        # xinit config
        sudo cat <<EOT >> $HOME/.xinitrc
export DESKTOP_SESSION=plasma
exec startplasma-x11
EOT
        echo '[[ ! $DISPLAY && $XDG_VTNR -eq 1 ]] && exec startx' >> $HOME/.bash_profile
        
        install_fonts
}

install_gnome(){
        clear
        
        echo "Installing Gnome.."
        sudo pacman -S gnome gnome-tweaks xscreensaver firefox flatpak nemo nemo-fileroller nemo-preview gtk-engine-murrine sassc seahorse gparted grub-customizer
        yay -S pamac-aur snapper-gui rar gdm-settings cava getextensions-git
        
        install_fonts
        install_popshell

        # install flatpak user repo
        flatpak --user remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

        # install GKraken for NZXT pump configuration
        flatpak install flathub com.leinardi.gkraken

        # xscreensaver settings - 10 min timeout - GL matrix 
        curl -sL $BASE_URL/sweet/.xscreensaver -o $HOME/.xscreensaver
        if [ ! -d $HOME/.config/autostart/ ];then mkdir $HOME/.config/autostart;fi
        curl -sL $BASE_URL/sweet/xscreensaver.desktop -o $HOME/.config/autostart/xscreensaver.desktop

        # set some nice defaults
        xdg-mime default nemo.desktop inode/directory application/x-gnome-saved-search
        gsettings set org.cinnamon.desktop.default-applications.terminal exec urxvt
        gsettings set org.cinnamon.desktop.default-applications.terminal exec-arg -e

        gsettings set org.gnome.desktop.interface font-name "SF Pro Rounded Regular 11"
        gsettings set org.gnome.desktop.interface document-font-name "SF Pro Rounded Regular 11"
        gsettings set org.gnome.desktop.interface monospace-font-name "Source Code Pro 9"
        gsettings set org.gnome.desktop.wm.preferences titlebar-font "SF Pro Rounded Regular 11"

        gsettings set org.gnome.desktop.wm.preferences button-layout "close,minimize,maximize:"
        gsettings set org.gnome.mutter center-new-windows "true"

        gsettings set org.gnome.desktop.input-sources sources "[('xkb', 'gb')]"

        # Remove 'Utilities' folder in app grid so all apps are in view
        gsettings set org.gnome.desktop.app-folders folder-children "['YaST']"

        # apply blur to apps using mutter-rounded patch
        gsettings set org.gnome.mutter blur-list "['nemo', 'urxvt', 'geary', 'code-oss', 'gnome-calendar', 'gnome-contacts', 'gnome-calculator', 'gnome-control-center']"

        # add dash to dock extension
        yay -S gnome-shell-extension-dash-to-dock

# #dashtodockContainer .overview-icon {
#     padding-top:2px;
#     padding-bottom:2px;
#     padding-right: 1px;
#     padding-left: 1px;
#     margin-bottom: 2px;
# }

# #dashtodockContainer .icon {
#     padding-top:2px;
#     padding-bottom:2px;
#     padding-right: 1px;
#     padding-left: 1px;
# }

##fildem fix
#sudo ln -s /usr/lib/python3.9/site-packages/fildem /usr/lib/python3.10/site-packages 
#sudo ln -s /usr/lib/python3.9/site-packages/fildem-0.6.7-py3.9.egg-info/ /usr/lib/python3.10/site-packages

        # add arch updater extension
        yay -S gnome-shell-extension-arch-update
        gsettings set org.gnome.shell.extensions.arch-update check-cmd "/bin/sh -c \"(/usr/bin/checkupdates; /usr/bin/yay -Qqu --color never | sed 's/Get .*//') | sort -u -t' ' -k1,1\""
        gsettings set org.gnome.shell.extensions.arch-update update-cmd 'urxvt -e sh -c "yay -Syu ; echo Done - Press enter to exit; read"'
        gsettings set org.gnome.shell.extensions.arch-update package-manager 'pamac-manager'
        gsettings set org.gnome.shell.extensions.arch-update use-buildin-icons true

        # Remove some trash from Gnome
        sudo pacman -Rs epiphany gnome-music cheese totem gnome-books gnome-software vino gnome-boxes

        # Install WhiteSur apple like theme
        install_whitesur

	sudo systemctl enable gdm

        # create a snapshot
        for i in `seq 2 50`; do sudo snapper delete $i; done;
        sudo snapper -c root create --description "### FRESH INSTALL - Including Gnome ###" # ID 2
        sudo grub-mkconfig -o /boot/grub/grub.cfg
}

install_popshell(){
        yay -S typescript gnome-shell-extension-pop-shell-git
        git clone https://github.com/pop-os/shell.git /tmp/shell
        cd /tmp/shell
        make local-install
        cd
        gsettings --schemadir ~/.local/share/gnome-shell/extensions/pop-shell@system76.com/schemas set org.gnome.shell.extensions.pop-shell activate-launcher "['<Super>space']"
}

install_whitesur(){
        git clone https://github.com/prstephens/WhiteSur-gtk-theme.git $HOME/WhiteSur-gtk-theme
        cd $HOME/WhiteSur-gtk-theme
        ./install.sh -i arch -m -o normal -N glassy -s 280
        ./tweaks -d -c Dark
        ./tweaks.sh -f monterey
        ./tweaks.sh -F
        sudo ./tweaks.sh -g -c Dark -i arch
        cd..

        git clone https://github.com/prstephens/WhiteSur-icon-theme.git $HOME/WhiteSur-icon-theme
        $HOME/WhiteSur-icon-theme/install.sh

        git clone https://github.com/prstephens/WhiteSur-cursors.git $HOME/WhiteSur-cursors
        $HOME/WhiteSur-cursors/install.sh
}

install_orchis(){
        git clone https://github.com/prstephens/Orchis-theme.git /tmp/Orchis-theme
        /tmp/Orchis-theme/install.sh -d $HOME/.themes -t pink -c dark
        
        git clone https://github.com/prstephens/Tela-icon-theme.git /tmp/Tela-icon-theme
        /tmp/Tela-icon-theme/install.sh -d $HOME/.icons pink
}

install_xanmod(){
        clear
        # _microarchitecture=98 - Native Intel CPU
        env _microarchitecture=98 yay -S linux-xanmod-tt linux-xanmod-tt-headers
}

install_spotify(){
        echo "Installing Spotify..."
        curl -sS https://download.spotify.com/debian/pubkey_5E3C45D7B312C643.gpg | gpg --import -
        yay -S spotify spicetify-cli spicetify-themes-git

        sudo chmod a+wr /opt/spotify
        sudo chmod a+wr /opt/spotify/Apps -R

        spicetify backup apply
        spicetify config extensions dribbblish.js
        spicetify config current_theme Dribbblish color_scheme nord-dark
        spicetify apply
}

install_profile-sync-daemon(){
        sudo pacman -S profile-sync-daemon
        psd
        sed -i 's/^#BROWSERS=.*$/BROWSERS=(google-chrome firefox)/' $HOME/.config/psd/psd.conf
        sed -i 's/^#USE_OVERLAYFS=.*$/USE_OVERLAYFS="yes"/' $HOME/.config/psd/psd.conf
        echo "$USER ALL=(ALL) NOPASSWD: /usr/bin/psd-overlay-helper" | sudo tee -a /etc/sudoers
        systemctl --user enable --now psd.service  
}

install_anything-sync-daemon(){
        sudo pacman -S anything-sync-daemon
        sudo sed -i "s/^WHATTOSYNC=.*$/WHATTOSYNC=('\/home\/paul\/.cache')/" /etc/asd.conf
        sudo sed -i 's/^#USE_OVERLAYFS=.*$/USE_OVERLAYFS="yes"/' /etc/asd.conf
        sudo sed -i 's/^#VOLATILE=.*$/VOLATILE="\/dev\/shm")/' /etc/asd.conf
        sudo systemctl enable --now asd
}

install_apps(){
        clear

        echo "Installing Chrome, VS Code, OnlyOffice, Gimp..."
        yay -S google-chrome code onlyoffice-bin gimp vlc kodi dropbox handbrake rpi-imager-bin geary ventoy-bin etcher-bin

        install_spotify
}

install_qemu(){
        clear

        echo "Installing QEMU/KVM"
        sudo pacman -S libvirt virt-manager edk2-ovmf qemu iptables-nft dnsmasq dmidecode swtpm

        # Enable Virtualization Technology for Directed I/O in grub config as boot param
        # default_hugepagesz=1G hugepagesz=1G                   - pre-allocates RAM for VM using 1GB Hugepages
        sudo sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT=.*$/GRUB_CMDLINE_LINUX_DEFAULT="quiet loglevel=3 rd.systemd.show_status=false nowatchdog mitigations=off intel_iommu=on iommu=pt video=efifb:off pci=realloc default_hugepagesz=1G hugepagesz=1G"/' /etc/default/grub
        sudo sed -i 's/^MODULES=.*$/MODULES=(i915 btrfs vfio_pci vfio vfio_iommu_type1 vfio_virqfd)/' /etc/mkinitcpio.conf
        sudo mkinitcpio -P
        sudo grub-mkconfig -o /boot/grub/grub.cfg

        sudo usermod -a -G libvirt $USER

        sudo bash -c 'sudo cat <<EOT >> /etc/libvirt/qemu.conf
nvram = [
	"/usr/share/edk2-ovmf/x64/OVMF_CODE.fd:/usr/share/edk2-ovmf/x64/OVMF_VARS.fd"
]
EOT'

        sudo bash -c 'sudo cat <<EOT >> /etc/modprobe.d/vfio.conf
softdep nouveau pre: vfio-pci
softdep snd_hda_intel pre: vfio-pci
options vfio-pci ids=10de:1b80,10de:10f0
EOT'

        sudo bash -c 'sudo cat <<EOT >> /etc/modprobe.d/kvm.conf
options kvm ignore_msrs=Y
options kvm report_ignored_msrs=N
EOT
'
        sudo systemctl enable --now libvirtd.service
        sudo systemctl enable --now virtlogd.socket
        sudo virsh net-autostart default
        sudo virsh net-start default

        # WINDOWS 11 Bypass
        # =================
        #
        # mkdir /tmp/emulated_tpm
        # swtpm socket --tpmstate dir=/tmp/emulated_tpm --ctrl type=unixio,path=/tmp/emulated_tpm/swtpm-sock --log level=20 --tpm2
        # Pass through a TMP device as emulated TIS
        #
        # Secure boot
        # Use the /usr/share/edk2-ovmf/x64/OVMF_CODE.secboot.fd
        #
        # Regedit hack (for upgrading from Windows 10 ONLY)
        # HKEY_LOCAL_MACHINE\SYSTEM\Setup\MoSetup > New > DWORD (32-bit) Value. Name the value “AllowUpgradesWithUnsupportedTPMOrCPU" set it to 1
}

install_dev(){
        clear

        echo "Installing Development tools... IntelliJ, Java, gradle"
        sudo pacman -S jre11-openjdk jdk11-openjdk gradle intellij-idea-community-edition
        yay -S postman-bin
}

checkprogress(){
        i="0"
        while (true)
        do
            proc=$(ps aux | grep -v grep | grep -e $1)
            if [[ "$proc" == "" ]]; then break; fi
            sleep 0.5
            echo $i
            i=$(expr $i + 1)
        done
        # If it is done then display 100%
        echo 100
        # Give it some time to display the progress to the user.
        sleep 2
}

updatemirrors(){
        curl -sL "$MIRRORLIST_URL" | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 5 - > /etc/pacman.d/mirrorlist &
        {
            checkprogress "rankmirrors"

        } | whiptail --gauge --title "$BACKTITLE" "Ranking Mirrors..." 8 78 0
}

initialise(){

        # optimise yay when building packages
        sudo sed -i 's/^#MAKEFLAGS="-j2"/MAKEFLAGS="-j$(nproc)"/' /etc/makepkg.conf
        sudo sed -i "s/^PKGEXT=.*$/PKGEXT='.pkg.tar'/" /etc/makepkg.conf

        sudo sed -i 's/^CFLAGS.*/CFLAGS="-march=native -mtune=native -O2 -pipe -fstack-protector-strong --param=ssp-buffer-size=4 -fno-plt"/' /etc/makepkg.conf
        
        sudo sed -i 's/^#RUSTFLAGS.*/RUSTFLAGS="-C opt-level=2 -C target-cpu=native"/' /etc/makepkg.conf
        sudo sed -i 's/^#BUILDDIR.*/BUILDDIR=\/tmp\/makepkg/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSGZ.*/COMPRESSGZ=(pigz -c -f -n)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSBZ2.*/COMPRESSBZ2=(pbzip2 -c -f)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSXZ.*/COMPRESSXZ=(xz -T "$(getconf _NPROCESSORS_ONLN)" -c -z --best -)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSZST.*/COMPRESSZST=(zstd -c -z -q --ultra -T0 -22 -)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSLZ.*/COMPRESSLZ=(lzip -c -f)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSLRZ.*/COMPRESSLRZ=(lrzip -9 -q)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSLZO.*/COMPRESSLZO=(lzop -q --best)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSZ.*/COMPRESSZ=(compress -c -f)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSLZ4.*/COMPRESSLZ4=(lz4 -q --best)/' /etc/makepkg.conf

        whiptail --backtitle "$BACKTITLE" --msgbox --title "Warning" "Please manually correct the MAKEFLAGS line in /etc/makepkg.conf" 0 78
        sudo nano /etc/makepkg.conf

        # install yay
        git clone https://aur.archlinux.org/yay.git $HOME/yay
        cd $HOME/yay
        makepkg -si
        cd ..

        # remove annoying yay questions
        yay --save --answerdiff None --answerclean None --removemake 

        # snapper config
        sudo umount /.snapshots
        sudo rm -r /.snapshots
        sudo snapper -c root create-config /
        sudo btrfs subvolume delete /.snapshots
        sudo mkdir /.snapshots
        sudo mount -a
        sudo chmod 750 /.snapshots
        sudo chmod a+rx /.snapshots
        sudo chown :paul /.snapshots

        sudo sed -i 's/^ALLOW_USERS=.*$/ALLOW_USERS="paul"/' /etc/snapper/configs/root
        sudo sed -i 's/^TIMELINE_LIMIT_HOURLY=.*$/TIMELINE_LIMIT_HOURLY="5"/' /etc/snapper/configs/root
        sudo sed -i 's/^TIMELINE_LIMIT_DAILY=.*$/TIMELINE_LIMIT_DAILY="7"/' /etc/snapper/configs/root
        sudo sed -i 's/^TIMELINE_LIMIT_WEEKLY=.*$/TIMELINE_LIMIT_WEEKLY="0"/' /etc/snapper/configs/root
        sudo sed -i 's/^TIMELINE_LIMIT_MONTHLY=.*$/TIMELINE_LIMIT_MONTHLY="0"/' /etc/snapper/configs/root
        sudo sed -i 's/^TIMELINE_LIMIT_YEARLY=.*$/TIMELINE_LIMIT_YEARLY="0"/' /etc/snapper/configs/root

        sudo systemctl enable --now snapper-timeline.timer
        sudo systemctl enable --now snapper-cleanup.timer
        sudo systemctl enable --now btrfs-scrub@-.timer

        yay -S snap-pac-grub snapper-rollback snp

        # config for booting a snapshot in read only
        sudo cp /lib/initcpio/hooks/grub-btrfs-overlayfs /etc/initcpio/hooks
        sudo cp /lib/initcpio/install/grub-btrfs-overlayfs /etc/initcpio/install
        sudo sed -i 's/^HOOKS=.*$/HOOKS=(base udev autodetect modconf block filesystems keyboard fsck grub-btrfs-overlayfs)/' /etc/mkinitcpio.conf
        sudo mkinitcpio -P

        # put root dev into snapper-rollback.conf
        echo "dev=${rootdev}" | sudo tee -a /etc/snapper-rollback.conf

        # git credentials
        git config --global credential.helper store
        git config --global user.email "pr.stephens@gmail.com"
        git config --global user.name "prstephens"

        # create a snapshot
        for i in `seq 1 50`; do sudo snapper delete $i; done;
        sudo snapper -c root create --description "### FRESH INSTALL - Base ###" #ID 1
        sudo grub-mkconfig -o /boot/grub/grub.cfg
}

# --------------------------------------------------------
rootdev=/root/dev # changed on the fly during install

[[ ! -d $HOME/yay ]] && initialise

mainmenu