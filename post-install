#! /bin/bash

# Arch Linux Post Install Script 
# ------------------------------
# author    : prstephens
#             https://github.com/prstephens           
# project   : https://github.com/prstephens/archinstallscript
# license   : LGPL-3.0 (http://opensource.org/licenses/lgpl-3.0.html)
# referance : https://wiki.archlinux.org/index.php/Installation_guide

VERSION="2"
BACKTITLE="Arch Installer v"$VERSION
BASE_URL="https://raw.githubusercontent.com/prstephens/archinstallscript/master/"

rootdev=/root/dev # changed on the fly during install
USE_CRYPT=0 # changed on the fly during install
USE_RAID=0 # changed on the fly during install
USE_GRUB=0 # changed on the fly during install
TLP=0 # changed on the fly during install

theme="Light"

set -o pipefail
#set -x #toggle for debug. Will print all commands.

# --------------------------------------------------------

mainmenu(){
        options=()
        options+=("GNOME" "Vanilla GNOME install")
        options+=("GNOME MAC OS" "Install GNOME with Mac OS theme")
        options+=("PLASMA" "Install KDE Plasma")
        options+=("CHICAGO95" "Install Windows 95 theme with XFCE")
        options+=("WINDOWS XP" "Install XFCE with the iconic Windows XP theme")
        options+=("APPLICATIONS" "Install some useful Applications")
        options+=("ADAWAY" "Setup a service to update hosts files and block ads")
        options+=("WARP" "Setup Cloudfare WARP (Poor man VPN)")
        options+=("ZRAM" "Use ZRAM as the swap (defaults to half your memory)")
        options+=("QEMU" "QEMU/KVM")

        sel=$(whiptail --backtitle "${BACKTITLE}" --fb --title "Arch Linux Post Installer" --menu "" --cancel-button "Exit" --default-item "." 20 78 0 \
            "${options[@]}" \
            3>&1 1>&2 2>&3)
        if [ "$?" = "0" ]; then
            case ${sel} in
                "GNOME")
                        install_gnome
                ;;
                "GNOME MAC OS")
                        install_gnome
                        install_gnome_mac
                ;;
                "PLASMA")
                        install_plasma
                ;;
                "CHICAGO95")
                        install_xfce
                        install_chicago95
                ;;
                "WINDOWS XP")
                        install_xfce
                        install_xp
                        apply_xp_theme
                ;;
                "APPLICATIONS")
                        install_apps
                ;;
                "ADAWAY")
                        setup_adaway
                ;;
                "WARP")
                        setup_cloudflare_warp
                ;;
                "ZRAM")
                        setup_zram
                ;;
                "QEMU")
                        install_qemu
                ;;
            esac
            mainmenu
        else
            clear
        fi
}

install_base_packages(){
        sudo pacman -S --noconfirm xscreensaver firefox sassc seahorse gparted code meld pavucontrol
        yay -S snapper-gui-git rar btrfs-assistant
}

install_fonts(){
        echo "Installing fonts..."
        yay -S apple-fonts ttf-cascadia-code-nerd ttf-meslo-nerd-font-powerlevel10k ttf-croscore ttf-google-sans

        [[ ! -d $HOME/.local/share/fonts ]] && mkdir -p $HOME/.local/share/fonts
        curl -sL $BASE_URL/fonts/HelveticaNeueLt.ttf -o $HOME/.local/share/fonts/HelveticaNeueLt.ttf
        curl -sL $BASE_URL/fonts/acorn/bedstead.otf -o $HOME/.local/share/fonts/bedstead.otf

        echo "Windows fonts..."
        #yay -S ttf-ms-win11-auto
        install_windows_11_fonts

        # disable all bitmap font rendering
        cat <<EOT > $HOME/.config/fontconfig/conf.d/20-no-embedded.conf
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "urn:fontconfig:fonts.dtd">
<fontconfig>
  <match target="font">
    <edit name="embeddedbitmap" mode="assign">
      <bool>false</bool>
    </edit>
  </match>
</fontconfig>
EOT
        fc-cache -f
}

install_windows_11_fonts(){
        curl -sL $BASE_URL/fonts/win/windowsfonts.tar.gz.partaa -o /tmp/windowsfonts.tar.gz.partaa
        curl -sL $BASE_URL/fonts/win/windowsfonts.tar.gz.partab -o /tmp/windowsfonts.tar.gz.partab
        curl -sL $BASE_URL/fonts/win/windowsfonts.tar.gz.partac -o /tmp/windowsfonts.tar.gz.partac
        curl -sL $BASE_URL/fonts/win/windowsfonts.tar.gz.partad -o /tmp/windowsfonts.tar.gz.partad
        curl -sL $BASE_URL/fonts/win/windowsfonts.tar.gz.partae -o /tmp/windowsfonts.tar.gz.partae

        cat /tmp/windowsfonts.tar.gz.parta* > /tmp/windowsfonts.tar.gz

        sudo tar -zxvf /tmp/windowsfonts.tar.gz -C /

        fc-cache -f
}

install_gnome(){
        clear
        
        echo "Installing Gnome.."

        install_base_packages

        sudo pacman -S --noconfirm gnome gnome-tweaks file-roller gnome-terminal
        yay -S --noconfirm extension-manager
        
        install_fonts

        apply_xcreensaver

        # add arch updater extension
        yay -S --noconfirm gnome-shell-extension-arch-update
        gsettings set org.gnome.shell.extensions.arch-update check-cmd "/bin/sh -c \"(/usr/bin/checkupdates; /usr/bin/yay -Qqu --color never | sed 's/Get .*//') | sort -u -t' ' -k1,1\""
        gsettings set org.gnome.shell.extensions.arch-update update-cmd 'gnome-terminal -- bash -c "yay; echo Done - Press enter to exit; read"'
        gsettings set org.gnome.shell.extensions.arch-update use-buildin-icons true
        gsettings set org.gnome.shell.extensions.arch-update strip-versions true
        gsettings set org.gnome.shell disable-extension-version-validation "true"
        gsettings set org.gnome.desktop.input-sources sources "[('xkb', 'gb')]"

        if [[ "$TLP" -eq 1 ]]
        then
                git clone https://github.com/arelange/gnome-shell-extension-hibernate-status.git /tmp/gnome-shell-extension-hibernate-status
                cp -r /tmp/gnome-shell-extension-hibernate-status $HOME/.local/share/gnome-shell/extensions/hibernate-status\@dromi
                gnome-extensions enable hibernate-status@dromi
        fi

        # Turn on some extensions
        gnome-extensions enable user-theme@gnome-shell-extensions.gcampax.github.com
        gnome-extensions enable arch-update@RaphaelRochet
        
        # Remove some trash from Gnome
        sudo pacman -Rs --noconfirm epiphany gnome-music totem gnome-connections gnome-text-editor gnome-tour gnome-console gnome-user-docs yelp gnome-maps gnome-software

        # pin some nice favourites to the dash
        gsettings set org.gnome.shell favorite-apps "$(gsettings get org.gnome.shell favorite-apps | sed s/.$//), 'org.gnome.Terminal.desktop', 'firefox.desktop', 'org.gnome.Calendar.desktop', 'org.gnome.Contacts.desktop', 'org.gnome.Calculator.desktop', 'code-oss.desktop', 'org.gnome.Photos.desktop', 'org.gnome.tweaks.desktop', 'com.mattjakeman.ExtensionManager.desktop', 'org.gnome.Settings.desktop']"

        cat <<EOT >> $HOME/.bash_profile
if [ "$XDG_SESSION_TYPE" = "wayland" ]; then
    export MOZ_ENABLE_WAYLAND=1
fi
EOT
        install_ufw

	sudo systemctl enable gdm

        # create a snapshot
        for i in `seq 2 50`; do sudo snapper delete $i; done;
        sudo snapper -c root create --description "### FRESH INSTALL - Including Gnome ###" # ID 2

        # gnome-terminal padding add to ~/.config/gtk-3.0/gtk.css
        # VteTerminal,
        # erminalScreen,
        # vte-terminal {
        #         padding: 20px 20px 20px 20px;
        #         -VteTerminal-inner-border: 10px 10px 10px 10px;
        # }

        # Change Google Drive name in Nautilus sidebar
        # ~/.config/goa-1.0/accounts.conf
        # PresentationIdentity=Google Drive

        # Change wallpaper in Gnome overview
        # ~/.themes/WhiteSur-Dark/gnome-shell/gnome-shell.css
        # #overviewGroup {
        #         background-image: url("/home/paul/Downloads/croped-colorful-abstract-background-wallpaper.jpg");
        #         background-size: cover;
        # }              
}

install_ufw(){
        sudo pacman -S --noconfirm ufw gufw
        sudo systemctl enable ufw.service

        sudo ufw default deny
        sudo ufw allow from 192.168.1.0/24
        sudo ufw limit ssh
        sudo ufw logging off

        sudo ufw enable
}

apply_xcreensaver(){
        # xscreensaver settings - 10 min timeout - GL matrix 
        curl -sL $BASE_URL/configs/home/.xscreensaver -o $HOME/.xscreensaver
        if [ ! -d $HOME/.config/autostart/ ];then mkdir $HOME/.config/autostart;fi
        curl -sL $BASE_URL/configs/home/xscreensaver.desktop -o $HOME/.config/autostart/xscreensaver.desktop
}

install_dash_to_dock(){
        # add dash to dock extension - use ubuntu-dock branch. better compatibility with blur my shell
        git clone https://github.com/micheleg/dash-to-dock.git -b ubuntu-dock /tmp/ubuntu-dock
        cd /tmp/ubuntu-dock

        # Change the icon spacing to 0 so the dock isnt so stretched
        sed -i 's/$dock_icons_distance: 4px;/$dock_icons_distance: 0px;/' _stylesheet.scss
        make
        make install

        curl -sL $BASE_URL/configs/extensions/dash-to-dock-settings-$theme -o /tmp/dash-to-dock-settings
        dconf load /org/gnome/shell/extensions/dash-to-dock/ < /tmp/dash-to-dock-settings
}

install_plymouth(){
        sudo pacman -S --noconfirm plymouth

        if [[ "$USE_GRUB" -eq 1 ]]
        then
                sudo sed -i 's/quiet/quiet splash/' /etc/default/grub
                sudo grub-mkconfig -o /boot/grub/grub.cfg
        else
                sudo sed -i 's/quiet/quiet splash/' /boot/loader/entries/arch.conf
        fi

        sudo sed -i 's/systemd/systemd plymouth/' /etc/mkinitcpio.conf
        sudo mkinitcpio -P     
}

apply_plymouth_mac(){
        git clone https://github.com/fathyar/mac-plymouth.git /tmp/mac-plymouth
        sudo cp -r /tmp/mac-plymouth/mac/ /usr/share/plymouth/themes/
        sudo plymouth-set-default-theme -R mac    
}

apply_plymouth_xp(){
        sudo plymouth-set-default-theme -R bootvid    
}

install_gnome_mac(){
        # Remove 'Utilities' folder in app grid so all apps are in view
        gsettings set org.gnome.desktop.app-folders folder-children "['YaST']"

        # install the Mac theme set
        install_whitesur

        # install dash to dock extension
        install_dash_to_dock

        # blur my shell
        git clone https://github.com/aunetx/blur-my-shell /tmp/blur-my-shell
        cd /tmp/blur-my-shell
        make install

        # panel corners
        git clone https://github.com/aunetx/panel-corners.git /tmp/panel-corners
        cd /tmp/panel-corners
        make install

        # logo menu
        git clone https://github.com/Aryan20/Logomenu.git /tmp/logo-menu
        cd /tmp/logo-menu
        make install

        # Unite 
        git clone https://github.com/hardpixel/unite-shell.git /tmp/unite
        cp -r /tmp/unite/unite\@hardpixel.eu ~/.local/share/gnome-shell/extensions

        # Just Perfection
        git clone https://gitlab.gnome.org/jrahmatzadeh/just-perfection.git /tmp/just-perfection
        cd /tmp/just-perfection
        ./scripts/build.sh -i

        # Favourites in app grid
        git clone https://gitlab.gnome.org/harshadgavali/favourites-in-appgrid.git /tmp/favourites-in-appgrid
        cd /tmp/favourites-in-appgrid
        make
        
        # plymouth macos loading theme        
        install_plymouth
        apply_plymouth_mac
        
        curl -sL $BASE_URL/configs/extensions/blur-my-shell-settings -o /tmp/blur-my-shell-settings
        curl -sL $BASE_URL/configs/extensions/panel-corners-settings -o /tmp/panel-corners-settings
        curl -sL $BASE_URL/configs/extensions/logo-menu-settings -o /tmp/logo-menu-settings
        curl -sL $BASE_URL/configs/extensions/unite-settings -o /tmp/unite-settings
        curl -sL $BASE_URL/configs/extensions/just-perfection-settings -o /tmp/just-perfection-settings

        dconf load /org/gnome/shell/extensions/blur-my-shell/ < /tmp/blur-my-shell-settings
        dconf load /org/gnome/shell/extensions/panel-corners/ < /tmp/panel-corners-settings
        dconf load /org/gnome/shell/extensions/Logo-menu/ < /tmp/logo-menu-settings
        dconf load /org/gnome/shell/extensions/unite/ < /tmp/unite-settings
        dconf load /org/gnome/shell/extensions/just-perfection/ < /tmp/just-perfection-settings

        gnome-extensions enable ubuntu-dock@ubuntu.com
        gnome-extensions enable blur-my-shell@aunetx
        gnome-extensions enable panel-corners@aunetx
        gnome-extensions enable logomenu@aryan_k
        gnome-extensions enable unite@hardpixel.eu
        gnome-extensions enable just-perfection-desktop@just-perfection
        gnome-extensions enable favourites-in-appgrid@harshadgavali.gitlab.org
}

install_whitesur(){
        gsettings set org.gnome.desktop.interface clock-show-weekday true

        [[ ! -d $HOME/.local/share/backgrounds ]] && mkdir -p $HOME/.local/share/backgrounds

        curl -sL $BASE_URL/wallpaper/macos/ventura-light.jpg -o $HOME/.local/share/backgrounds/ventura-Light.jpg
        curl -sL $BASE_URL/wallpaper/macos/ventura-dark.jpg -o $HOME/.local/share/backgrounds/ventura-Dark.jpg

        curl -sL $BASE_URL/wallpaper/macos/monterey-light.jpg -o $HOME/.local/share/backgrounds/monterey-Light.jpg
        curl -sL $BASE_URL/wallpaper/macos/monterey-dark.jpg -o $HOME/.local/share/backgrounds/monterey-Dark.jpg

        curl -sL $BASE_URL/wallpaper/macos/bigsur-light.jpg -o $HOME/.local/share/backgrounds/bigsur-Light.jpg
        curl -sL $BASE_URL/wallpaper/macos/bigsur-dark.jpg -o $HOME/.local/share/backgrounds/bigsur-Dark.jpg

        curl -sL $BASE_URL/wallpaper/macos/sonoma-light.jpg -o $HOME/.local/share/backgrounds/sonoma-Light.jpg
        curl -sL $BASE_URL/wallpaper/macos/sonoma-dark.jpg -o $HOME/.local/share/backgrounds/sonoma-Dark.jpg

        curl -sL $BASE_URL/wallpaper/macos/sequoia-light.png -o $HOME/.local/share/backgrounds/sequoia-Light.png
        curl -sL $BASE_URL/wallpaper/macos/sequoia-dark.png -o $HOME/.local/share/backgrounds/sequoia-Dark.png

        theme=$(whiptail --backtitle "$BACKTITLE" --title "Select theme variation" --radiolist "Choose" 20 30 5 \
        "Light" "" light \
        "Dark" "" dark \
        3>&1 1>&2 2>&3)

        git clone https://github.com/prstephens/WhiteSur-gtk-theme.git /tmp/WhiteSur-gtk-theme
        cd /tmp/WhiteSur-gtk-theme

        ./install.sh -m -o normal -N glassy -c $theme -s 280 -l -c $theme
        sudo ./tweaks.sh -g -c $theme -b $HOME/.local/share/backgrounds/sequoia-Light.png
        gsettings set org.gnome.desktop.background picture-uri file:////$HOME/.local/share/backgrounds/sequoia-Light.png
        curl -sL $BASE_URL/configs/home/.Xresources-$theme -o $HOME/.Xresources
        ./tweaks.sh -d -c $theme
        ./tweaks.sh -f monterey
        ./tweaks.sh -F
        sudo flatpak override --filesystem=xdg-config/gtk-4.0

        git clone https://github.com/prstephens/WhiteSur-icon-theme.git /tmp/WhiteSur-icon-theme
        /tmp/WhiteSur-icon-theme/install.sh -b
        # change some icons to a better mac version
        cp -R /tmp/WhiteSur-icon-theme/original/*.svg $HOME/.local/share/icons/WhiteSur/apps/scalable/

        git clone https://github.com/prstephens/WhiteSur-cursors.git /tmp/WhiteSur-cursors
        cd /tmp/WhiteSur-cursors
        ./install.sh

        # MacOS calendar icon fix
        git clone https://github.com/prstephens/mac-dynamic-calendar.git /tmp/mac-dynamic-calendar
        cp -R /tmp/mac-dynamic-calendar/dynamic-calendar-and-clocks-icons\@fcusr.github.com $HOME/.local/share/gnome-shell/extensions
        curl -sL $BASE_URL/configs/extensions/mac-dynamic-calendar-settings -o /tmp/mac-dynamic-calendar-settings
        dconf load /org/gnome/shell/extensions/dynamic-calendar-and-clocks-icons/ < /tmp/mac-dynamic-calendar-settings
        gnome-extensions enable dynamic-calendar-and-clocks-icons@fcusr.github.com

        gsettings set org.gnome.desktop.interface gtk-theme WhiteSur-$theme
        gsettings set org.gnome.desktop.interface cursor-theme WhiteSur-cursors
        gsettings set org.gnome.shell.extensions.user-theme name WhiteSur-$theme
        gsettings set org.gnome.desktop.interface icon-theme WhiteSur

        if [[ "$theme" == "Dark" ]]
        then
                gsettings set org.gnome.desktop.interface icon-theme WhiteSur-dark
        fi

        gsettings set org.gnome.desktop.interface font-name "SF Pro Rounded Regular 11"
        gsettings set org.gnome.desktop.interface document-font-name "SF Pro Rounded Regular 11"
        gsettings set org.gnome.desktop.interface monospace-font-name "Source Code Pro 9"
        gsettings set org.gnome.desktop.wm.preferences titlebar-font "SF Pro Rounded Regular 11"

        gsettings set org.gnome.desktop.wm.preferences button-layout "close,minimize,maximize:"

        # Gnome Extensions
        # ==================================================================================
        #
        # clipboard indicator
        # Compiz alike magic lamp effect
        # Desktop Icons NG (DING)
        # Espresso
        # Hibernate status button
        # Search Light
        # Tray icons reloaded
}

install_plasma(){
        install_base_packages
        sudo pacman -S --noconfirm plasma-meta kde-system-meta kvantum sddm 
        sudo systemctl enable sddm.service
        apply_xcreensaver
        install_fonts
        install_ufw
}

install_xfce(){
        install_base_packages
        yay -S xfce4 xdg-user-dirs xfce4-panel-profiles xfce4-whiskermenu-plugin xfce4-pulseaudio-plugin thunar-archive-plugin gvfs ark gdm

        if [[ "$TLP" -eq 1 ]]
        then
                yay -S xfce4-power-manager
        fi
        
        apply_xcreensaver
        install_fonts
        install_plymouth
        install_ufw

	sudo systemctl enable gdm
}

install_xp(){
        yay -S xfce-winxp-tc-git
        git clone https://github.com/prstephens/Windows-XP.git $HOME/.icons/Windows-XP
        git clone https://github.com/prstephens/xp-wallpapers.git /tmp/xp-wallpapers
        sudo cp -R /tmp/xp-wallpapers /usr/share/backgrounds/
}

apply_xp_theme(){
        xdg-user-dirs-update

        xfconf-query -c xsettings -p /Net/IconThemeName -s "Windows-XP"
        xfconf-query -c xsettings -p /Net/SoundThemeName -s "Windows XP Default"
        xfconf-query -c xsettings -p /Net/ThemeName -s "Windows XP style (Blue)"
        xfconf-query -c xsettings -p /Net/EnableEventSounds -s "true"
        xfconf-query -c xsettings -p /Net/EnableInputFeedbackSounds -s "true"

        xfconf-query --create -c xsettings -p /Xfce/SyncThemes -n -t bool -s "true"

        xfconf-query -c xsettings -p /Gtk/FontName -s "Tahoma 8"
        xfconf-query -c xsettings -p /Gtk/CursorThemeName -s "standard-with-shadow"

        xfconf-query -c xfwm4 -p /general/title_font -s "Trebuchet MS Bold 10"
        xfconf-query -c xfwm4 -p /general/theme -s "Windows XP style (Blue)"

        xfconf-query -c xfce4-notifyd -p /notify-location -n -t string -s "bottom-right"
        xfconf-query -c xfce4-desktop -p /desktop-icons/icon-size -s "48"
        xfconf-query -c xfce4-desktop -p /desktop-icons/primary -s "true"
        xfconf-query -c xfce4-desktop -p /desktop-icons/tooltip-size -s "32.000000"
        
        xfconf-query -c keyboard-layout -p /Default/XkbLayout -s "gb"

        xfconf-query -c xfce4-desktop -p $(xfconf-query -c xfce4-desktop -l | grep "workspace0/last-image") -s /usr/share/backgrounds/xp-wallpapers/Bliss.jpg 

        apply_plymouth_xp
}

install_profile-sync-daemon(){
        sudo pacman -S --noconfirm profile-sync-daemon
        psd
        sed -i 's/^#BROWSERS=.*$/BROWSERS=(google-chrome firefox)/' $HOME/.config/psd/psd.conf
        sed -i 's/^#USE_OVERLAYFS=.*$/USE_OVERLAYFS="yes"/' $HOME/.config/psd/psd.conf
        echo "$USER ALL=(ALL) NOPASSWD: /usr/bin/psd-overlay-helper" | sudo tee -a /etc/sudoers
        systemctl --user enable --now psd.service  
}

install_anything-sync-daemon(){
        sudo pacman -S --noconfirm anything-sync-daemon
        sudo sed -i "s/^WHATTOSYNC=.*$/WHATTOSYNC=('$HOME/.cache')/" /etc/asd.conf
        sudo sed -i 's/^#USE_OVERLAYFS=.*$/USE_OVERLAYFS="yes"/' /etc/asd.conf
        sudo sed -i 's/^#VOLATILE=.*$/VOLATILE=("\/dev\/shm")/' /etc/asd.conf
        sudo systemctl enable --now asd
}

install_apps(){
        clear

        echo "Installing Chrome, OnlyOffice, Gimp..."
        yay -S spotify-launcher google-chrome onlyoffice-bin gimp vlc kodi dropbox handbrake geary ventoy-bin etcher-bin
}

install_qemu(){
        clear

        echo "Installing QEMU/KVM"
        sudo pacman -S libvirt virt-manager edk2-ovmf qemu iptables-nft dnsmasq dmidecode swtpm

        # Enable Virtualization Technology for Directed I/O in grub config as boot param
        # default_hugepagesz=1G hugepagesz=1G                   - pre-allocates RAM for VM using 1GB Hugepages
        sudo sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT=.*$/GRUB_CMDLINE_LINUX_DEFAULT="quiet loglevel=3 systemd.show_status=auto rd.udev.log_level=3 nowatchdog mitigations=off intel_iommu=on iommu=pt video=efifb:off pci=realloc default_hugepagesz=1G hugepagesz=1G"/' /etc/default/grub
        sudo sed -i 's/^MODULES=.*$/MODULES=(i915 btrfs vfio_pci vfio vfio_iommu_type1)/' /etc/mkinitcpio.conf
        sudo mkinitcpio -P
        sudo grub-mkconfig -o /boot/grub/grub.cfg

        sudo usermod -a -G libvirt $USER

        sudo bash -c 'sudo cat <<EOT >> /etc/libvirt/qemu.conf
nvram = [
	"/usr/share/edk2-ovmf/x64/OVMF_CODE.fd:/usr/share/edk2-ovmf/x64/OVMF_VARS.fd"
]
EOT'

        sudo bash -c 'sudo cat <<EOT >> /etc/modprobe.d/vfio.conf
softdep nouveau pre: vfio-pci
softdep snd_hda_intel pre: vfio-pci
options vfio-pci ids=10de:1b80,10de:10f0
EOT'

        sudo bash -c 'sudo cat <<EOT >> /etc/modprobe.d/kvm.conf
options kvm ignore_msrs=Y
options kvm report_ignored_msrs=N
EOT
'
        sudo systemctl enable --now libvirtd.service
        sudo systemctl enable --now virtlogd.socket
        sudo virsh net-autostart default
        sudo virsh net-start default

        # WINDOWS 11 Bypass
        # =================
        #
        # mkdir /tmp/emulated_tpm
        # swtpm socket --tpmstate dir=/tmp/emulated_tpm --ctrl type=unixio,path=/tmp/emulated_tpm/swtpm-sock --log level=20 --tpm2
        # Pass through a TMP device as emulated TIS
        #
        # Secure boot
        # Use the /usr/share/edk2-ovmf/x64/OVMF_CODE.secboot.fd
        #
        # Regedit hack (for upgrading from Windows 10 ONLY)
        # HKEY_LOCAL_MACHINE\SYSTEM\Setup\MoSetup > New > DWORD (32-bit) Value. Name the value “AllowUpgradesWithUnsupportedTPMOrCPU" set it to 1
}

install_chicago95(){
        git clone https://github.com/grassmunk/Chicago95.git /tmp/chicargo95
        cd /tmp/chicargo95
        ./installer.py
}

setup_adaway(){

        sudo bash -c 'sudo cat <<EOT > /usr/bin/adaway
#! /bin/bash
cp /etc/hosts.base /etc/hosts
curl -sL https://adaway.org/hosts.txt >> /etc/hosts
curl -sL https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts >> /etc/hosts
curl -sL "https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&showintro=0&mimetype=plaintext" >> /etc/hosts
EOT'

        sudo chmod +x /usr/bin/adaway
        sudo bash -c 'sudo cat <<EOT > /etc/systemd/system/adaway.timer
[Unit]
Description=Refresh Host file with AdAway hosts weekly.

[Timer]
OnCalendar=weekly
Unit=adaway.service

[Install]
WantedBy=multi-user.target
EOT'

        sudo bash -c 'sudo cat <<EOT > /etc/systemd/system/adaway.service 
[Unit]
Description=AdAway hosts update
Wants=network-online.target
After=network-online.target nss-lookup.target

[Service]
Type=oneshot
ExecStart=/usr/bin/adaway
EOT'

        sudo systemctl start adaway.service
        sudo systemctl enable --now adaway.timer
}

setup_zram(){
        ram=$(expr $(grep MemTotal /proc/meminfo | awk '{print $2}') / 1000 / 1000 / 2)

        sudo tee -a /usr/local/bin/zram_start >/dev/null <<'EOT'
#!/bin/bash
sudo bash -c "echo 0 > /sys/module/zswap/parameters/enabled"
sudo swapoff --all
sudo modprobe zram num_devices=1
sudo bash -c "echo zstd > /sys/block/zram0/comp_algorithm"
sudo bash -c "echo ZRAM_SIZE > /sys/block/zram0/disksize"
sudo mkswap --label zram0 /dev/zram0
sudo swapon --priority 32767 /dev/zram0
EOT

        sudo sed -i "s|ZRAM_SIZE|${ram}G|" /usr/local/bin/zram_start
        sudo chmod +x /usr/local/bin/zram_start

        sudo tee -a /etc/systemd/system/zram-swap.service >/dev/null <<'EOT'
[Unit]
Description=Configure zram swap device
After=local-fs.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/zram_start
#ExecStop=/usr/local/bin/zram_stop
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOT

        sudo systemctl enable zram-swap.service

        sudo sed -i '/swap/s/^/#/' /etc/fstab

        whiptail --backtitle "$BACKTITLE" --msgbox --title "ZRAM" "To enable ZRAM please reboot" 0 78
}

setup_cloudflare_warp(){
        yay -S --noconfirm cloudflare-warp-bin warpgui-bin
        sudo systemctl enable --now warp-svc.service
}

initialise(){
        whiptail --backtitle "$BACKTITLE" --msgbox --title "Welcome!" "Welcome to Arch Linux\n\nWe will now initialise the system" 0 78

        # optimise yay when building packages
        sudo sed -i 's/^#MAKEFLAGS="-j2"/MAKEFLAGS="-j$(nproc)"/' /etc/makepkg.conf
        sudo sed -i "s/^PKGEXT=.*$/PKGEXT='.pkg.tar'/" /etc/makepkg.conf

        sudo sed -i 's/^#RUSTFLAGS.*/RUSTFLAGS="-C opt-level=2 -C target-cpu=native"/' /etc/makepkg.conf
        sudo sed -i 's/^#BUILDDIR.*/BUILDDIR=\/tmp\/makepkg/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSGZ.*/COMPRESSGZ=(pigz -c -f -n)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSBZ2.*/COMPRESSBZ2=(pbzip2 -c -f)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSXZ.*/COMPRESSXZ=(xz -T "$(getconf _NPROCESSORS_ONLN)" -c -z --best -)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSZST.*/COMPRESSZST=(zstd -c -z -q --ultra -T0 -22 -)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSLZ.*/COMPRESSLZ=(lzip -c -f)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSLRZ.*/COMPRESSLRZ=(lrzip -9 -q)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSLZO.*/COMPRESSLZO=(lzop -q --best)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSZ.*/COMPRESSZ=(compress -c -f)/' /etc/makepkg.conf
        sudo sed -i 's/^COMPRESSLZ4.*/COMPRESSLZ4=(lz4 -q --best)/' /etc/makepkg.conf

        # install yay
        git clone https://aur.archlinux.org/yay-bin.git $HOME/yay
        cd $HOME/yay
        makepkg -si
        cd

        # remove annoying yay questions
        yay --save --answerdiff None --answerclean None --removemake --batchinstall --devel --builddir /tmp/yay

        # snapper config
        sudo umount /.snapshots
        sudo rm -r /.snapshots
        sudo snapper -c root create-config /
        sudo btrfs subvolume delete /.snapshots
        sudo mkdir /.snapshots
        sudo mount -a
        sudo chmod 750 /.snapshots
        sudo chmod a+rx /.snapshots
        sudo chown :$USER /.snapshots

        sudo sed -i "s|^ALLOW_USERS=.*$|ALLOW_USERS=\"$USER\"|" /etc/snapper/configs/root
        sudo sed -i 's/^TIMELINE_LIMIT_HOURLY=.*$/TIMELINE_LIMIT_HOURLY="5"/' /etc/snapper/configs/root
        sudo sed -i 's/^TIMELINE_LIMIT_DAILY=.*$/TIMELINE_LIMIT_DAILY="7"/' /etc/snapper/configs/root
        sudo sed -i 's/^TIMELINE_LIMIT_WEEKLY=.*$/TIMELINE_LIMIT_WEEKLY="0"/' /etc/snapper/configs/root
        sudo sed -i 's/^TIMELINE_LIMIT_MONTHLY=.*$/TIMELINE_LIMIT_MONTHLY="0"/' /etc/snapper/configs/root
        sudo sed -i 's/^TIMELINE_LIMIT_YEARLY=.*$/TIMELINE_LIMIT_YEARLY="0"/' /etc/snapper/configs/root

        sudo systemctl enable --now snapper-timeline.timer
        sudo systemctl enable --now snapper-cleanup.timer
        sudo systemctl enable --now btrfs-scrub@-.timer

        yay -S snapper-rollback snp --noconfirm

        # put root dev into snapper-rollback.conf
        echo "dev=${rootdev}" | sudo tee -a /etc/snapper-rollback.conf

        if [[ "$USE_GRUB" -eq 1 ]]
        then
                yay -S snap-pac-grub --noconfirm

                # config for booting a snapshot in read only
                sudo cp /lib/initcpio/hooks/grub-btrfs-overlayfs /etc/initcpio/hooks
                sudo cp /lib/initcpio/install/grub-btrfs-overlayfs /etc/initcpio/install

                HOOKS="(systemd autodetect microcode keyboard sd-vconsole modconf kms block filesystems grub-btrfs-overlayfs)"
                HOOKS_RAID="(systemd autodetect keyboard microcode sd-vconsole modconf kms block mdadm_udev filesystems grub-btrfs-overlayfs)"
                HOOKS_CRYPT="(systemd autodetect microcode keyboard sd-vconsole modconf kms block sd-encrypt lvm2 filesystems grub-btrfs-overlayfs)"
                HOOKS_RAID_CRYPT="(systemd autodetect microcode keyboard sd-vconsole modconf kms block mdadm_udev sd-encrypt lvm2 filesystems grub-btrfs-overlayfs)"
                
                if [[ "$USE_CRYPT" -eq 1 ]]; then
                        if [[ "$USE_RAID" -eq 1 ]]; then
                                HOOKS="$HOOKS_RAID_CRYPT"
                        else
                                HOOKS="$HOOKS_CRYPT"
                        fi
                else
                        if [[ "$USE_RAID" -eq 1 ]]; then
                                HOOKS="$HOOKS_RAID"
                        fi
                fi

                sed -i "s|^HOOKS=.*$|HOOKS=${HOOKS}|" /mnt/etc/mkinitcpio.conf
        else
                yay -S snap-pac systemd-boot-pacman-hook --noconfirm
        fi

        sudo mkinitcpio -P

        # create a snapshot
        for i in `seq 1 50`; do sudo snapper delete $i; done;
        sudo snapper -c root create --description "### FRESH INSTALL - Base ###" #ID 1

        sudo mkdir /.bootbackup
        cat <<EOT | sudo tee -a /usr/bin/boot-backup
#!/bin/bash
/usr/bin/rsync -a --delete /boot /.bootbackup/\$(ls -1v /.snapshots | tail -n 1)
EOT
        sudo chmod +x /usr/bin/boot-backup
        sudo mkdir /etc/pacman.d/hooks
        cat <<EOT | sudo tee -a /etc/pacman.d/hooks/95-bootbackup.hook
[Trigger]
Operation = Upgrade
Operation = Install
Operation = Remove
Type = Path
Target = usr/lib/modules/*/vmlinuz

[Action]
Depends = rsync
Description = Backing up /boot...
When = PostTransaction
Exec = /usr/bin/boot-backup
EOT
        # Run the boot backup for first time so we have a copy of a working kernel 
        sudo /usr/bin/boot-backup      
}

checkconnection(){
        if [[ $(ping -q -w1 -c1 google.com &>/dev/null && echo online || echo offline) == "offline" ]]; 
        then
                whiptail --backtitle "$BACKTITLE" --msgbox --title "No Network Connection" "You need to be connected to the Internet.\n\nInstallation stopped." --fb 0 78
                exit
        fi
}

self_update(){
        curl -sL $BASE_URL/version -o /tmp/version
        value=$(</tmp/version)
        if (("$VERSION" < "$value")); then
                curl -sL $BASE_URL/post-install -o $HOME/post-install
                chmod +x $HOME/post-install
                exec $HOME/post-install
                exit 1
        fi
}

# --------------------------------------------------------

checkconnection
self_update

[[ ! -d $HOME/.config/yay ]] && initialise

mainmenu
